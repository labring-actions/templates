apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: mautic
spec:
  title: 'mautic'
  url: 'https://www.mautic.org/'
  gitRepo: 'https://github.com/mautic/mautic'
  author: 'Sealos'
  description: 'Mautic is the world’s largest open source marketing automation software.'
  readme: 'https://raw.githubusercontent.com/mautic/mautic/refs/heads/6.x/README.md'
  icon: 'https://avatars.githubusercontent.com/u/5257677?s=48&v=4'
  templateType: inline
  locale: en
  i18n:
    zh:
      title: 'Mautic'
      description: 'Mautic 是一款开源的营销自动化平台，提供电子邮件营销、客户旅程设计、潜在客户管理和行为跟踪等功能，帮助企业自动化营销流程、分析用户互动并个性化客户体验。'
  categories:
    - tool
  defaults:
    app_host:
      # number or string..
      type: string
      value: mautic-${{ random(8) }}
    app_name:
      type: string
      value: mautic-${{ random(8) }}
  inputs:
    TIMEZONE:
      description: 'defaults to UTC'
      type: choice
      options:
        - UTC
        - Asia/Shanghai
      required: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mysql
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mysql
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mysql

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mysql
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mysql
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mysql
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mysql
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mysql
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mysql
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-mysql
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-mysql

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: apecloud-mysql
    clusterversion.kubeblocks.io/name: ac-mysql-8.0.30
  name: ${{ defaults.app_name }}-mysql
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: apecloud-mysql
  clusterVersionRef: ac-mysql-8.0.30
  componentSpecs:
    - componentDefRef: mysql
      monitor: true
      name: mysql
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 50m
          memory: 51Mi
      serviceAccountName: ${{ defaults.app_name }}-mysql
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi

  terminationPolicy: Delete
  tolerations: []

---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${{ defaults.app_name }}-mysql-init
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: mysql-init
          image: joseluisq/mysql-client:8.0.30
          imagePullPolicy: IfNotPresent
          env:
            - name: MAUTIC_USER
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: username
            - name: MAUTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: password
            - name: MAUTIC_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: host
            - name: MAUTIC_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: port
          command:
            - /bin/sh
            - -c
            - |
              until mysql -h $MAUTIC_HOST -P $MAUTIC_PORT -u $MAUTIC_USER -p$MAUTIC_PASSWORD -e 'CREATE DATABASE IF NOT EXISTS mautic;'; do sleep 1; done
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${{ defaults.app_name }}
data:
  vn-etcvn-nginxvn-confvn-dvn-defaultvn-conf: |-
    server {
        listen 0.0.0.0:80;
        
        root /var/www/html/docroot;
        
        location / {
            index index.php;
            try_files $uri $uri/ /index.php?$query_string;
        }
    
        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_param HTTPS "on";
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
        }
    }

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}
  annotations:
    originImageName: mautic/mautic:5.2.3-fpm
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    app: ${{ defaults.app_name }}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: ${{ defaults.app_name }}
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}
    spec:
      terminationGracePeriodSeconds: 10
      automountServiceAccountToken: false
      initContainers:
        - name: take-data-dir-ownership
          image: mautic/mautic:5.2.3-fpm
          command: ["/bin/sh", "-c", "if [ ! -f /data/docroot/index.php ]; then cp -rf /var/www/html/docroot/* /data/; chown -R 33:33 /data; fi"]
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-varvn-wwwvn-htmlvn-docroot
              mountPath: /data
      containers:
        - name: ${{ defaults.app_name }}
          image: mautic/mautic:5.2.3-fpm
          env:
            - name: PHP_INI_VALUE_DATE_TIMEZONE
              value: "${{ inputs.TIMEZONE }}"
            - name: DOCKER_MAUTIC_RUN_MIGRATIONS
              value: 'false'
            - name: DOCKER_MAUTIC_LOAD_TEST_DATA
              value: 'false'
            - name: MAUTIC_DB_USER
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: username
            - name: MAUTIC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: password
            - name: MAUTIC_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: port
            - name: MAUTIC_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mysql-conn-credential
                  key: host
            - name: MAUTIC_DB_DATABASE
              value: mautic
          resources:
            requests:
              cpu: 10m
              memory: 51Mi
            limits:
              cpu: 100m
              memory: 512Mi
          ports:
            - name: http
              protocol: TCP
              containerPort: 9000
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-varvn-wwwvn-htmlvn-config
              mountPath: /var/www/html/config
            - name: vn-varvn-wwwvn-htmlvn-varvn-logs
              mountPath: /var/www/html/var/logs
            - name: vn-optvn-mauticvn-cron
              mountPath: /opt/mautic/cron
            - name: vn-varvn-wwwvn-htmlvn-docroot
              mountPath: /var/www/html/docroot
        - env:
          - name: PHP_INI_VALUE_DATE_TIMEZONE
            value: "${{ inputs.TIMEZONE }}"
          - name: DOCKER_MAUTIC_ROLE
            value: "mautic_cron"
          - name: MAUTIC_DB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_PORT
            valueFrom:
              secretKeyRef:
                key: port
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_HOST
            valueFrom:
              secretKeyRef:
                key: host
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_DATABASE
            value: mautic
          image: mautic/mautic:5.2.3-fpm
          imagePullPolicy: IfNotPresent
          name: ${{ defaults.app_name }}-cron
          resources:
            requests:
              cpu: 10m
              memory: 51Mi
            limits:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: vn-etcvn-nginxvn-confvn-dvn-defaultvn-conf
            subPath: ./etc/nginx/conf.d/default.conf
          - mountPath: /var/www/html/config
            name: vn-varvn-wwwvn-htmlvn-config
          - mountPath: /var/www/html/var/logs
            name: vn-varvn-wwwvn-htmlvn-varvn-logs
          - mountPath: /opt/mautic/cron
            name: vn-optvn-mauticvn-cron
          - mountPath: /var/www/html/docroot
            name: vn-varvn-wwwvn-htmlvn-docroot
        - env:
          - name: PHP_INI_VALUE_DATE_TIMEZONE
            value: "${{ inputs.TIMEZONE }}"
          - name: DOCKER_MAUTIC_ROLE
            value: "mautic_worker"
          - name: MAUTIC_DB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_PORT
            valueFrom:
              secretKeyRef:
                key: port
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_HOST
            valueFrom:
              secretKeyRef:
                key: host
                name: mautic-ovqmjzyp-mysql-conn-credential
          - name: MAUTIC_DB_DATABASE
            value: mautic
          image: mautic/mautic:5.2.3-fpm
          imagePullPolicy: IfNotPresent
          name: ${{ defaults.app_name }}-worker
          resources:
            requests:
              cpu: 10m
              memory: 51Mi
            limits:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: vn-etcvn-nginxvn-confvn-dvn-defaultvn-conf
            subPath: ./etc/nginx/conf.d/default.conf
          - mountPath: /var/www/html/config
            name: vn-varvn-wwwvn-htmlvn-config
          - mountPath: /var/www/html/var/logs
            name: vn-varvn-wwwvn-htmlvn-varvn-logs
          - mountPath: /opt/mautic/cron
            name: vn-optvn-mauticvn-cron
          - mountPath: /var/www/html/docroot
            name: vn-varvn-wwwvn-htmlvn-docroot
        - name: ${{ defaults.app_name }}-nginx
          image: nginx:1.27
          resources:
            requests:
              cpu: 10m
              memory: 12Mi
            limits:
              cpu: 100m
              memory: 128Mi
          ports:
            - name: http
              protocol: TCP
              containerPort: 80
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - curl -sf http://127.0.0.1/index.php
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
          volumeMounts:
            - name: vn-etcvn-nginxvn-confvn-dvn-defaultvn-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: ./etc/nginx/conf.d/default.conf
            - name: vn-varvn-wwwvn-htmlvn-docroot
              mountPath: /var/www/html/docroot
      volumes:
        - name: vn-etcvn-nginxvn-confvn-dvn-defaultvn-conf
          configMap:
            name: ${{ defaults.app_name }}
            items:
              - key: vn-etcvn-nginxvn-confvn-dvn-defaultvn-conf
                path: ./etc/nginx/conf.d/default.conf
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /var/www/html/config
          value: '1'
        name: vn-varvn-wwwvn-htmlvn-config
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
    - metadata:
        annotations:
          path: /var/www/html/var/logs
          value: '1'
        name: vn-varvn-wwwvn-htmlvn-varvn-logs
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
    - metadata:
        annotations:
          path: /opt/mautic/cron
          value: '1'
        name: vn-optvn-mauticvn-cron
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
    - metadata:
        annotations:
          path: /var/www/html/docroot
          value: '1'
        name: vn-varvn-wwwvn-htmlvn-docroot
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1G

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  ports:
    - port: 80
  selector:
    app: ${{ defaults.app_name }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    cloud.sealos.io/app-deploy-manager-domain: ${{ defaults.app_host }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}
                port:
                  number: 80
  tls:
    - hosts:
        - ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: app.sealos.io/v1
kind: App
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  data:
    url: https://${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
  displayType: normal
  icon: "https://avatars.githubusercontent.com/u/5257677?s=48&v=4"
  name: "Mautic"
  type: link