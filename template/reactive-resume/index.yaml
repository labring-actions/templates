apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: Reactive-Resume
spec:
  title: "Reactive-Resume"
  url: "https://rxresu.me/"
  gitRepo: "https://github.com/AmruthPillai/Reactive-Resume"
  author: "Sealos"
  description: "A free and open-source resume builder that simplifies the process of creating, updating, and sharing your resume."
  readme: "https://raw.githubusercontent.com/AmruthPillai/Reactive-Resume/main/README.md"
  icon: "https://raw.githubusercontent.com/AmruthPillai/Reactive-Resume/main/apps/client/public/logo/light.svg"
  templateType: inline
  categories:
    - tool
  defaults:
    app_name:
      type: string
      value: re-${{ random(8) }}
    minio_passwd:
      type: string
      value: ${{ random(24) }}
    domain:
      type: string
      value: re-${{ random(8) }}
  inputs:
    minio_storage:
      description: "Storage size for minio in Gi"
      type: number
      default: "5"
      required: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    clusterversion.kubeblocks.io/name: postgresql-14.8.0
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
  annotations: {}
  name: ${{ defaults.app_name }}-pg
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: postgresql
  clusterVersionRef: postgresql-14.8.0
  componentSpecs:
    - componentDefRef: postgresql
      monitor: true
      name: postgresql
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 50m
          memory: 51Mi
      serviceAccountName: ${{ defaults.app_name }}-pg
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi

  terminationPolicy: Delete
  tolerations: []

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-pg
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-pg
---
#laf minio
apiVersion: v1
kind: Secret
metadata:
  name: ${{ defaults.app_name }}-minio-secret
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-minio-secret
type: Opaque
stringData:
  rootUser: ${{ defaults.minio_passwd }}
  rootPassword: ${{ defaults.minio_passwd }}
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-minio
  labels:
    app: ${{ defaults.app_name }}-minio
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-minio
spec:
  type: ClusterIP
  ports:
    - name: api
      port: 9000
      protocol: TCP
      targetPort: 9000
    - name: console
      port: 9001
      protocol: TCP
      targetPort: 9001
  selector:
    app: ${{ defaults.app_name }}-minio
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-minio
  annotations:
    originImageName: quay.io/minio/minio
    deploy.cloud.sealos.io/minReplicas: "1"
    deploy.cloud.sealos.io/maxReplicas: "1"
  labels:
    app: ${{ defaults.app_name }}-minio
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-minio
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: ${{ defaults.app_name }}-minio-svc
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-minio
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-minio
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: ${{ defaults.app_name }}-minio
          image: quay.io/minio/minio:RELEASE.2023-03-22T06-36-24Z
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          command:
            [
              "/bin/sh",
              "-ce",
              "/usr/bin/docker-entrypoint.sh minio server  /data -S /etc/minio/certs/ --address :9000 --console-address :9001",
            ]
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-minio-secret
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-minio-secret
                  key: rootPassword
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          ports:
            - name: http
              containerPort: 9000
            - name: http-console
              containerPort: 9001
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /data
      volumes: []
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /data
          value: " ${{ inputs.minio_storage }} "
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${{ inputs.minio_storage }}Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-chrome
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-chrome
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: ${{ defaults.app_name }}-chrome

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-chrome
  labels:
    app: ${{ defaults.app_name }}-chrome
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-chrome
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-chrome
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-chrome
    spec:
      containers:
        - name: ${{ defaults.app_name }}-chrome
          securityContext: {}
          image: ghcr.io/browserless/chromium:v2.11.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: TIMEOUT
              value: "10000"
            - name: CONCURRENT
              value: "10"
            - name: TOKEN
              value: "chrome_token"
            - name: EXIT_ON_HEALTH_FAILURE
              value: "true"
            - name: PRE_REQUEST_HEALTH_CHECK
              value: "true"
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-app
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-app
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: ${{ defaults.app_name }}-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-app
  labels:
    app: ${{ defaults.app_name }}-app
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-app
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-app
    spec:
      containers:
        - name: ${{ defaults.app_name }}-app
          image: amruthpillai/reactive-resume:v4.1.2
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            - name: PORT
              value: "3000"
            - name: NODE_ENV
              value: "production"
            - name: PUBLIC_URL
              value: "https://${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}"
            - name: STORAGE_URL
              value: "https://oss-${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}/default"
            - name: CHROME_TOKEN
              value: "chrome_token"
            - name: CHROME_URL
              value: "ws://${{ defaults.app_name }}-chrome.${{ SEALOS_NAMESPACE }}.svc.cluster.local:3000"
            - name: DATABASE_URL
              value: "postgresql://postgres:$(PG_PASSWORD)@${{ defaults.app_name }}-pg-postgresql.${{ SEALOS_NAMESPACE }}.svc:5432/postgres"
            - name: ACCESS_TOKEN_SECRET
              value: "access_token_secret"
            - name: REFRESH_TOKEN_SECRET
              value: "refresh_token_secret"
            - name: MAIL_FROM
              value: "noreply@localhost"
            - name: STORAGE_ENDPOINT
              value: "${{ defaults.app_name }}-minio.${{ SEALOS_NAMESPACE }}.svc.cluster.local"
            - name: STORAGE_PORT
              value: "9000"
            - name: STORAGE_REGION
              value: "us-east-1"
            - name: STORAGE_BUCKET
              value: "default"
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-minio-secret
                  key: rootUser
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-minio-secret
                  key: rootPassword
            - name: STORAGE_USE_SSL
              value: "false"
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}-app
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-app
    cloud.sealos.io/app-deploy-manager-domain: ${{ defaults.domain }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: ${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - backend:
              service:
                name: ${{ defaults.app_name }}-app
                port:
                  number: 3000
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - ${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}-minio-console
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-minio
    cloud.sealos.io/app-deploy-manager-domain: minio-${{ defaults.domain }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: minio-${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}-minio
                port:
                  number: 9001
  tls:
    - hosts:
        - minio-${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}-minio-api
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-minio
    cloud.sealos.io/app-deploy-manager-domain: oss-${{ defaults.domain }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: oss-${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}-minio
                port:
                  number: 9000
  tls:
    - hosts:
        - oss-${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${{ defaults.app_name }}-postgres-schema-job
spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bitnami/postgresql:latest
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
          command:
            [
              "sh",
              "-c",
              "until pg_isready -h ${{ defaults.app_name }}-pg-postgresql.${{ SEALOS_NAMESPACE }}.svc -p 5432 -U postgres; do echo waiting for postgres; sleep 2; done;",
            ]
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
      containers:
        - name: update-schema
          image: bitnami/postgresql:latest
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
          command:
            [
              "sh",
              "-c",
              'psql postgresql://postgres:$PGPASSWORD@${{ defaults.app_name }}-pg-postgresql.${{ SEALOS_NAMESPACE }}.svc:5432/postgres -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"',
            ]
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
      restartPolicy: OnFailure
---
apiVersion: app.sealos.io/v1
kind: App
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  data:
    url: https://${{ defaults.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
  displayType: normal
  icon: "https://raw.githubusercontent.com/AmruthPillai/Reactive-Resume/main/apps/client/public/logo/light.svg"
  name: ${{ defaults.app_name }}
  type: link
