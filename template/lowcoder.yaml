apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: Lowcoder
spec:
  title: 'Lowcoder'
  url: 'https://lowcoder.cloud/'
  gitRepo: 'https://github.com/lowcoder-org/lowcoder'
  author: 'jveay'
  description: 'Lowcoder is the best Retool, Appsmith or Tooljet Alternative'
  readme: 'https://github.com/lowcoder-org/lowcoder/blob/e5f36abb5243aed1a214c659ef6f398f62dcfed7/README.md'
  icon: 'https://avatars.githubusercontent.com/u/132206721?s=48&v=4'
  templateType: inline
  defaults:
    app_name:
      type: string
      value: lowcoder-${{ random(8) }}
    app_host:
      type: string
      value: ${{ random(8) }}
  inputs:
    DB_ENCRYPTION_PASSWORD:
      description: 'LOWCODER_DB_ENCRYPTION_PASSWORD'
      type: string
      default: ${{ random(24) }}
      required: true
    DB_ENCRYPTION_SALT:
      description: 'LOWCODER_DB_ENCRYPTION_SALT'
      type: string
      default: ${{ random(24) }}
      required: true
    LOWCODER_API_KEY_SECRET:
      description: 'LOWCODER_API_KEY_SECRET'
      type: string
      default: ${{ random(24) }}
      required: true
---
# mongo sa
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mongo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mongo
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mongo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-mongo
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-mongo
    namespace: ${{ SEALOS_NAMESPACE}}
---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: mongodb
    clusterversion.kubeblocks.io/name: mongodb-6.0
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
  annotations: {}
  name: ${{ defaults.app_name }}-mongo
  generation: 1
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: mongodb
  clusterVersionRef: mongodb-5.0
  componentSpecs:
    - componentDefRef: mongodb
      monitor: true
      name: mongodb
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 256Mi
      serviceAccountName: ${{ defaults.app_name }}-mongo
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            storageClassName: openebs-backup
  terminationPolicy: Delete
  tolerations: []
---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: redis
    clusterversion.kubeblocks.io/name: redis-7.0.6
    sealos-db-provider-cr: ${{ defaults.app_name }}-redis
  annotations: {}
  name: ${{ defaults.app_name }}-redis
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: redis
  clusterVersionRef: redis-7.0.6
  componentSpecs:
    - componentDefRef: redis
      monitor: true
      name: redis
      replicas: 1
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
        requests:
          cpu: 100m
          memory: 102Mi
      serviceAccountName: ${{ defaults.app_name }}-redis
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi
            storageClassName: openebs-backup
    - componentDefRef: redis-sentinel
      monitor: true
      name: redis-sentinel
      replicas: 1
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 100m
          memory: 100Mi
      serviceAccountName: ${{ defaults.app_name }}-redis
  terminationPolicy: Delete
  tolerations: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-redis
    app.kubernetes.io/instance: ${{ defaults.app_name }}-redis
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-redis

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-redis
    app.kubernetes.io/instance: ${{ defaults.app_name }}-redis
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-redis
rules:
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-redis
    app.kubernetes.io/instance: ${{ defaults.app_name }}-redis
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-redis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-redis
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-redis
    namespace: ${{ SEALOS_NAMESPACE }}
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: ${{ defaults.app_name }}
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-api-service
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-api-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: ${{ defaults.app_name }}-api-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-api-service
  annotations:
    originImageName: lowcoderorg/lowcoder-ce-api-service:latest
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
    deploy.cloud.sealos.io/resize: 0Gi
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-api-service
    app: ${{ defaults.app_name }}-api-service
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-api-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ${{ defaults.app_name }}-api-service
    spec:
      containers:
        - name: ${{ defaults.app_name }}-api-service
          image: lowcoderorg/lowcoder-ce-api-service:latest
          env:
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mongo-conn-credential
                  key: password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-redis-conn-credential
                  key: password                                
            - name: LOWCODER_PUID
              value: '9001'
            - name: LOWCODER_PGID
              value: '9001'
            - name: LOWCODER_MONGODB_URL
              value: >-
                mongodb://root:$(MONGO_PASSWORD)@${{ defaults.app_name }}-mongo-mongodb.${{ SEALOS_NAMESPACE }}.svc:27017/lowcoder?authSource=admin
            - name: LOWCODER_REDIS_URL
              value: redis://default:$(REDIS_PASSWORD)@${{ defaults.app_name }}-redis-redis.${{ SEALOS_NAMESPACE }}.svc:6379
            - name: LOWCODER_NODE_SERVICE_URL
              value: http://${{ defaults.app_name }}-node-service.${{ SEALOS_NAMESPACE }}.svc.cluster.local:6060
            - name: LOWCODER_MAX_QUERY_TIMEOUT
              value: '120'
            - name: LOWCODER_EMAIL_AUTH_ENABLED
              value: 'true'
            - name: LOWCODER_EMAIL_SIGNUP_ENABLED
              value: 'true'
            - name: LOWCODER_CREATE_WORKSPACE_ON_SIGNUP
              value: 'true'                                  
            - name: LOWCODER_DB_ENCRYPTION_PASSWORD
              value: ${{ inputs.DB_ENCRYPTION_PASSWORD }}
            - name: LOWCODER_DB_ENCRYPTION_SALT
              value: ${{ inputs.DB_ENCRYPTION_SALT }}
            - name: LOWCODER_CORS_DOMAINS
              value: '*'
            - name: LOWCODER_MAX_ORGS_PER_USER
              value: '100'
            - name: LOWCODER_MAX_MEMBERS_PER_ORG
              value: '1000'
            - name: LOWCODER_MAX_GROUPS_PER_ORG
              value: '100'
            - name: LOWCODER_MAX_APPS_PER_ORG
              value: '1000'
            - name: LOWCODER_MAX_DEVELOPERS
              value: '50'
            - name: LOWCODER_API_KEY_SECRET
              value: ${{ inputs.LOWCODER_API_KEY_SECRET }}
            - name: LOWCODER_WORKSPACE_MODE
              value: 'SAAS'           
          resources:
            requests:
              cpu: 200m
              memory: 204Mi
            limits:
              cpu: 2000m
              memory: 2048Mi
          ports:
            - containerPort: 8080
          imagePullPolicy: Always
          volumeMounts: []
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-node-service
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-node-service
spec:
  ports:
    - port: 6060
      targetPort: 6060
  selector:
    app: ${{ defaults.app_name }}-node-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-node-service
  annotations:
    originImageName: lowcoderorg/lowcoder-ce-node-service:latest
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
    deploy.cloud.sealos.io/resize: 0Gi
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-node-service
    app: ${{ defaults.app_name }}-node-service
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-node-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ${{ defaults.app_name }}-node-service
    spec:
      containers:
        - name: ${{ defaults.app_name }}-node-service
          image: lowcoderorg/lowcoder-ce-node-service:latest
          env:
            - name: LOWCODER_PUID
              value: '9001'
            - name: LOWCODER_PGID
              value: '9001'
            - name: LOWCODER_API_SERVICE_URL
              value: http://${{ defaults.app_name }}-api-service.${{ SEALOS_NAMESPACE }}.svc.cluster.local:8080
          resources:
            requests:
              cpu: 200m
              memory: 204Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
          ports:
            - containerPort: 6060
          imagePullPolicy: Always
          volumeMounts: []
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes: []

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}
  annotations:
    originImageName: lowcoderorg/lowcoder-ce-frontend:latest
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
    deploy.cloud.sealos.io/resize: 0Gi
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    app: ${{ defaults.app_name }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ${{ defaults.app_name }}
    spec:
      containers:
        - name: ${{ defaults.app_name }}-frontend
          image: lowcoderorg/lowcoder-ce-frontend:latest
          env:
            - name: LOWCODER_PUID
              value: '9001'
            - name: LOWCODER_PGID
              value: '9001'
            - name: LOWCODER_MAX_REQUEST_SIZE
              value: 20m
            - name: LOWCODER_MAX_QUERY_TIMEOUT
              value: '120'
            - name: LOWCODER_API_SERVICE_URL
              value: http://${{ defaults.app_name }}-api-service.${{ SEALOS_NAMESPACE }}.svc.cluster.local:8080
            - name: LOWCODER_NODE_SERVICE_URL
              value: http://${{ defaults.app_name }}-node-service.${{ SEALOS_NAMESPACE }}.svc.cluster.local:6060
          resources:
            requests:
              cpu: 200m
              memory: 409Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
          ports:
            - containerPort: 3000
          imagePullPolicy: Always
          volumeMounts: []
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes: []
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    cloud.sealos.io/app-deploy-manager-domain: ${{ defaults.app_host }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
spec:
  rules:
    - host: ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}
                port:
                  number: 3000
  tls:
    - hosts:
        - ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}