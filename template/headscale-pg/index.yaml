apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: headscale-pg
spec:
  title: 'Headscale PostgreSQL'
  url: 'https://github.com/juanfont/headscale'
  gitRepo: 'https://github.com/juanfont/headscale'
  author: 'Sealos'
  description: 'An open source, self-hosted implementation of the Tailscale control server with PostgreSQL.'
  readme: 'https://raw.githubusercontent.com/juanfont/headscale/refs/heads/main/README.md'
  icon: 'https://raw.githubusercontent.com/juanfont/headscale/main/docs/logo/headscale3-dots.svg'
  templateType: inline
  locale: en
  i18n:
    zh:
      title: 'Headscale PostgreSQL 版'
      description: '一个自托管的开源 Tailscale 控制服务器实现，使用 PostgreSQL 作为数据库。'
      readme: 'https://raw.githubusercontent.com/labring-actions/templates/main/template/headscale-pg/README.md'
  categories:
    - tool
  defaults:
    app_name:
      type: string
      value: headscale-${{ random(8) }}
    app_suffix:
      type: string
      value: ${{ random(8) }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: headscale-${{ defaults.app_suffix }}-pg
    app.kubernetes.io/instance: headscale-${{ defaults.app_suffix }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: headscale-${{ defaults.app_suffix }}-pg

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    clusterversion.kubeblocks.io/name: postgresql-14.8.0
    sealos-db-provider-cr: headscale-${{ defaults.app_suffix }}-pg
  annotations: {}
  name: headscale-${{ defaults.app_suffix }}-pg
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: postgresql
  clusterVersionRef: postgresql-14.8.0
  componentSpecs:
    - componentDefRef: postgresql
      monitor: true
      name: postgresql
      replicas: 1
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
        requests:
          cpu: 100m
          memory: 102Mi
      serviceAccountName: headscale-${{ defaults.app_suffix }}-pg
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi

  terminationPolicy: Delete
  tolerations: []

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: headscale-${{ defaults.app_suffix }}-pg
    app.kubernetes.io/instance: headscale-${{ defaults.app_suffix }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: headscale-${{ defaults.app_suffix }}-pg
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: headscale-${{ defaults.app_suffix }}-pg
    app.kubernetes.io/instance: headscale-${{ defaults.app_suffix }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: headscale-${{ defaults.app_suffix }}-pg
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: headscale-${{ defaults.app_suffix }}-pg
subjects:
  - kind: ServiceAccount
    name: headscale-${{ defaults.app_suffix }}-pg

---
apiVersion: batch/v1
kind: Job
metadata:
  name: headscale-${{ defaults.app_suffix }}-pg-init
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: pgsql-init
          image: senzing/postgresql-client:2.2.4
          env:
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: headscale-${{ defaults.app_suffix }}-pg-conn-credential
                  key: password
            - name: DATABASE_URL
              value: postgresql://postgres:$(PG_PASSWORD)@headscale-${{ defaults.app_suffix }}-pg-postgresql.${{ SEALOS_NAMESPACE }}.svc:5432
          command:
            - /bin/sh
            - -c
            - |
              until psql ${DATABASE_URL} -c 'CREATE DATABASE headscale;' &>/dev/null; do sleep 1; done
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: headscale-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: headplane-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
rules:
- apiGroups: ['']
  resources: ['pods']
  verbs: ['get', 'list']
- apiGroups: ['apps']
  resources: ['deployments']
  verbs: ['get', 'list']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: headplane-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: headplane-${{ defaults.app_suffix }}
subjects:
- kind: ServiceAccount
  name: headscale-${{ defaults.app_suffix }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: headscale-${{ defaults.app_suffix }}
  annotations:
    originImageName: headscale/headscale:0.24.1-debug
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
    app: headscale-${{ defaults.app_suffix }}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10
  serviceName: headscale-${{ defaults.app_suffix }}
  selector:
    matchLabels:
      app: headscale-${{ defaults.app_suffix }}
  template:
    metadata:
      labels:
        app: headscale-${{ defaults.app_suffix }}
    spec:
      terminationGracePeriodSeconds: 10
      automountServiceAccountToken: true
      shareProcessNamespace: true
      serviceAccountName: headscale-${{ defaults.app_suffix }}
      initContainers:
        - name: copy-config
          image: alpine
          env:
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: headscale-${{ defaults.app_suffix }}-pg-conn-credential
                  key: password
          command: ["/bin/sh", "-c", "if [ ! -f /etc/headscale/config.yaml ]; then cp /tmp/config.yaml /etc/headscale/config.yaml && sed -i 's/pass: bar/pass: $(DATABASE_PASSWORD)/g' /etc/headscale/config.yaml; fi"]
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-etcvn-headscale
              mountPath: /etc/headscale
            - name: vn-etcvn-headscalevn-configvn-yaml
              mountPath: /tmp/config.yaml
              subPath: ./tmp/config.yaml
      containers:
        - name: headscale-${{ defaults.app_suffix }}
          image: headscale/headscale:0.24.1-debug
          command: ["headscale", "serve"]
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 500m
              memory: 512Mi
          ports:
            - name: http
              protocol: TCP
              containerPort: 8080
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-varvn-libvn-headscale
              mountPath: /var/lib/headscale
            - name: vn-etcvn-headscale
              mountPath: /etc/headscale
            - name: vn-etcvn-headscalevn-derpvn-yaml
              mountPath: /etc/headscale/derp.yaml
              subPath: ./etc/headscale/derp.yaml
            - name: vn-etcvn-headscalevn-configvn-yaml
              mountPath: /tmp/config.yaml
              subPath: ./tmp/config.yaml
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 15
        - name: headscale-headplane-${{ defaults.app_suffix }}
          image: ghcr.io/tale/headplane:0.3.9
          env:
            - name: COOKIE_SECRET
              value: 'abcdefghijklmnopqrstuvwxyz'
            - name: HEADSCALE_INTEGRATION
              value: 'kubernetes'
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
              # Only set this to false if you aren't behind a reverse proxy
            - name: COOKIE_SECURE
              value: 'true'
            - name: ROOT_API_KEY
              value: '1234567890'
            - name: DISABLE_API_KEY_LOGIN
              value: 'true'
            - name: HEADSCALE_URL
              value: 'https://headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}'
          resources:
            requests:
              cpu: 10m
              memory: 25Mi
            limits:
              cpu: 100m
              memory: 256Mi
          ports:
            - name: http
              protocol: TCP
              containerPort: 3000
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-varvn-libvn-headscale
              mountPath: /var/lib/headscale
            - name: vn-etcvn-headscale
              mountPath: /etc/headscale
            - name: vn-etcvn-headscalevn-derpvn-yaml
              mountPath: /etc/headscale/derp.yaml
              subPath: ./etc/headscale/derp.yaml
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 15
      volumes:
        - name: vn-etcvn-headscalevn-configvn-yaml
          configMap:
            name: headscale-${{ defaults.app_suffix }}
            items:
              - key: vn-etcvn-headscalevn-configvn-yaml
                path: ./tmp/config.yaml
        - name: vn-etcvn-headscalevn-derpvn-yaml
          configMap:
            name: headscale-${{ defaults.app_suffix }}
            items:
              - key: vn-etcvn-headscalevn-derpvn-yaml
                path: ./etc/headscale/derp.yaml
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /var/lib/headscale
          value: '1'
        name: vn-varvn-libvn-headscale
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
    - metadata:
        annotations:
          path: /etc/headscale
          value: '1'
        name: vn-etcvn-headscale
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: headscale-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
spec:
  ports:
    - name: http
      targetPort: 8080
      port: 8080
    - name: grpc
      targetPort: 50443
      port: 50443
    - name: metrics
      targetPort: 9090
      port: 9090
    - name: headplane
      targetPort: 3000
      port: 3000
  selector:
    app: headscale-${{ defaults.app_suffix }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: headscale-${{ defaults.app_suffix }}
data:
  vn-etcvn-headscalevn-configvn-yaml: |-
    # headscale will look for a configuration file named `config.yaml` (or `config.json`) in the following     order:
    #
    # - `/etc/headscale`
    # - `~/.headscale`
    # - current working directory
    
    # The url clients will connect to.
    # Typically this will be a domain like:
    #
    # https://myheadscale.example.com:443
    #
    server_url: https://headscale-rewcdzwp.sealoshzh.site
    
    # Address to listen to / bind to on the server
    #
    # For production:
    # listen_addr: 0.0.0.0:8080
    listen_addr: 0.0.0.0:8080
    
    # Address to listen to /metrics, you may want
    # to keep this endpoint private to your internal
    # network
    #
    metrics_listen_addr: 0.0.0.0:9090
    
    # Address to listen for gRPC.
    # gRPC is used for controlling a headscale server
    # remotely with the CLI
    # Note: Remote access _only_ works if you have
    # valid certificates.
    #
    # For production:
    # grpc_listen_addr: 0.0.0.0:50443
    grpc_listen_addr: 0.0.0.0:50443
    
    # Allow the gRPC admin interface to run in INSECURE
    # mode. This is not recommended as the traffic will
    # be unencrypted. Only enable if you know what you
    # are doing.
    grpc_allow_insecure: true
    
    # The Noise section includes specific configuration for the
    # TS2021 Noise protocol
    noise:
      # The Noise private key is used to encrypt the
      # traffic between headscale and Tailscale clients when
      # using the new Noise-based protocol.
      private_key_path: /var/lib/headscale/noise_private.key
    
    # List of IP prefixes to allocate tailaddresses from.
    # Each prefix consists of either an IPv4 or IPv6 address,
    # and the associated prefix length, delimited by a slash.
    # It must be within IP ranges supported by the Tailscale
    # client - i.e., subnets of 100.64.0.0/10 and fd7a:115c:a1e0::/48.
    # See below:
    # IPv6: https://github.com/tailscale/tailscale/blob/22ebb25e833264f58d7c3f534a8b166894a89536/net/tsaddr/    tsaddr.go#LL81C52-L81C71
    # IPv4: https://github.com/tailscale/tailscale/blob/22ebb25e833264f58d7c3f534a8b166894a89536/net/tsaddr/    tsaddr.go#L33
    # Any other range is NOT supported, and it will cause unexpected issues.
    prefixes:
      v6: fd7a:115c:a1e0::/48
      v4: 100.64.0.0/10
    
      # Strategy used for allocation of IPs to nodes, available options:
      # - sequential (default): assigns the next free IP from the previous given IP.
      # - random: assigns the next free IP from a pseudo-random IP generator (crypto/rand).
      allocation: sequential
    
    # DERP is a relay system that Tailscale uses when a direct
    # connection cannot be established.
    # https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp
    #
    # headscale needs a list of DERP servers that can be presented
    # to the clients.
    derp:
      server:
        # If enabled, runs the embedded DERP server and merges it into the rest of the DERP config
        # The Headscale server_url defined above MUST be using https, DERP requires TLS to be in place
        enabled: false
    
        # Region ID to use for the embedded DERP server.
        # The local DERP prevails if the region ID collides with other region ID coming from
        # the regular DERP config.
        region_id: 999
    
        # Region code and name are displayed in the Tailscale UI to identify a DERP region
        region_code: "headscale"
        region_name: "Headscale Embedded DERP"
    
        # Listens over UDP at the configured address for STUN connections - to help with NAT traversal.
        # When the embedded DERP server is enabled stun_listen_addr MUST be defined.
        #
        # For more details on how this works, check this great article: https://tailscale.com/blog/how-tailscale-works/
        stun_listen_addr: "0.0.0.0:3478"
    
        # Private key used to encrypt the traffic between headscale DERP
        # and Tailscale clients.
        # The private key file will be autogenerated if it's missing.
        #
        private_key_path: /var/lib/headscale/derp_server_private.key
    
        # This flag can be used, so the DERP map entry for the embedded DERP server is not written automatically,
        # it enables the creation of your very own DERP map entry using a locally available file with the parameter DERP.paths
        # If you enable the DERP server and set this to false, it is required to add the DERP server to the DERP map using DERP.paths
        automatically_add_embedded_derp_region: true
    
        # For better connection stability (especially when using an Exit-Node and DNS is not working),
        # it is possible to optionally add the public IPv4 and IPv6 address to the Derp-Map using:
        ipv4: 1.2.3.4
        ipv6: 2001:db8::1
    
      # List of externally available DERP maps encoded in JSON
      urls:
        - https://controlplane.tailscale.com/derpmap/default
    
      # Locally available DERP map files encoded in YAML
      #
      # This option is mostly interesting for people hosting
      # their own DERP servers:
      # https://tailscale.com/kb/1118/custom-derp-servers/
      #
      # paths:
      #   - /etc/headscale/derp-example.yaml
      paths:
        - /etc/headscale/derp.yaml
    
      # If enabled, a worker will be set up to periodically
      # refresh the given sources and update the derpmap
      # will be set up.
      auto_update_enabled: true
    
      # How often should we check for DERP updates?
      update_frequency: 24h
    
    # Disables the automatic check for headscale updates on startup
    disable_check_updates: false
    
    # Time before an inactive ephemeral node is deleted?
    ephemeral_node_inactivity_timeout: 30m
    
    database:
      # Database type. Available options: sqlite, postgres
      # Please note that using Postgres is highly discouraged as it is only supported for legacy reasons.
      # All new development, testing and optimisations are done with SQLite in mind.
      type: postgres
    
      # Enable debug mode. This setting requires the log.level to be set to "debug" or "trace".
      debug: false
    
      # GORM configuration settings.
      gorm:
        # Enable prepared statements.
        prepare_stmt: true
    
        # Enable parameterized queries.
        parameterized_queries: true
    
        # Skip logging "record not found" errors.
        skip_err_record_not_found: true
    
        # Threshold for slow queries in milliseconds.
        slow_threshold: 1000
    
      # SQLite config
      # sqlite:
      #   path: /var/lib/headscale/db.sqlite
    
        # Enable WAL mode for SQLite. This is recommended for production environments.
        # https://www.sqlite.org/wal.html
        # write_ahead_log: true
    
        # Maximum number of WAL file frames before the WAL file is automatically checkpointed.
        # https://www.sqlite.org/c3ref/wal_autocheckpoint.html
        # Set to 0 to disable automatic checkpointing.
        # wal_autocheckpoint: 1000
    
      # # Postgres config
      # Please note that using Postgres is highly discouraged as it is only supported for legacy reasons.
      # See database.type for more information.
      postgres:
        # If using a Unix socket to connect to Postgres, set the socket path in the 'host' field and leave 'port' blank.
        host: headscale-${{ defaults.app_suffix }}-pg-postgresql.${{ SEALOS_NAMESPACE }}.svc
        port: 5432
        name: headscale
        user: postgres
        pass: bar
        max_open_conns: 10
        max_idle_conns: 10
        conn_max_idle_time_secs: 3600
    
      #   # If other 'sslmode' is required instead of 'require(true)' and 'disabled(false)', set the 'sslmode' you need
      #   # in the 'ssl' field. Refers to https://www.postgresql.org/docs/current/libpq-ssl.html Table 34.1.
      #   ssl: false
    
    ### TLS configuration
    #
    ## Let's encrypt / ACME
    #
    # headscale supports automatically requesting and setting up
    # TLS for a domain with Let's Encrypt.
    #
    # URL to ACME directory
    acme_url: https://acme-v02.api.letsencrypt.org/directory
    
    # Email to register with ACME provider
    acme_email: ""
    
    # Domain name to request a TLS certificate for:
    tls_letsencrypt_hostname: ""
    
    # Path to store certificates and metadata needed by
    # letsencrypt
    # For production:
    tls_letsencrypt_cache_dir: /var/lib/headscale/cache
    
    # Type of ACME challenge to use, currently supported types:
    # HTTP-01 or TLS-ALPN-01
    # See [docs/tls.md](docs/tls.md) for more information
    tls_letsencrypt_challenge_type: HTTP-01
    # When HTTP-01 challenge is chosen, letsencrypt must set up a
    # verification endpoint, and it will be listening on:
    # :http = port 80
    tls_letsencrypt_listen: ":http"
    
    ## Use already defined certificates:
    tls_cert_path: ""
    tls_key_path: ""
    
    log:
      # Output formatting for logs: text or json
      format: text
      level: info
    
    ## Policy
    # headscale supports Tailscale's ACL policies.
    # Please have a look to their KB to better
    # understand the concepts: https://tailscale.com/kb/1018/acls/
    policy:
      # The mode can be "file" or "database" that defines
      # where the ACL policies are stored and read from.
      mode: database
      # If the mode is set to "file", the path to a
      # HuJSON file containing ACL policies.
      path: ""
    
    ## DNS
    #
    # headscale supports Tailscale's DNS configuration and MagicDNS.
    # Please have a look to their KB to better understand the concepts:
    #
    # - https://tailscale.com/kb/1054/dns/
    # - https://tailscale.com/kb/1081/magicdns/
    # - https://tailscale.com/blog/2021-09-private-dns-with-magicdns/
    #
    # Please note that for the DNS configuration to have any effect,
    # clients must have the `--accept-dns=true` option enabled. This is the
    # default for the Tailscale client. This option is enabled by default
    # in the Tailscale client.
    #
    # Setting _any_ of the configuration and `--accept-dns=true` on the
    # clients will integrate with the DNS manager on the client or
    # overwrite /etc/resolv.conf.
    # https://tailscale.com/kb/1235/resolv-conf
    #
    # If you want stop Headscale from managing the DNS configuration
    # all the fields under `dns` should be set to empty values.
    dns:
      # Whether to use [MagicDNS](https://tailscale.com/kb/1081/magicdns/).
      magic_dns: true
    
      # Defines the base domain to create the hostnames for MagicDNS.
      # This domain _must_ be different from the server_url domain.
      # `base_domain` must be a FQDN, without the trailing dot.
      # The FQDN of the hosts will be
      # `hostname.base_domain` (e.g., _myhost.example.com_).
      base_domain: example.com
    
      # List of DNS servers to expose to clients.
      nameservers:
        global:
          - 1.1.1.1
          - 1.0.0.1
          - 2606:4700:4700::1111
          - 2606:4700:4700::1001
    
          # NextDNS (see https://tailscale.com/kb/1218/nextdns/).
          # "abc123" is example NextDNS ID, replace with yours.
          # - https://dns.nextdns.io/abc123
    
        # Split DNS (see https://tailscale.com/kb/1054/dns/),
        # a map of domains and which DNS server to use for each.
        split:
          {}
          # foo.bar.com:
          #   - 1.1.1.1
          # darp.headscale.net:
          #   - 1.1.1.1
          #   - 8.8.8.8
    
      # Set custom DNS search domains. With MagicDNS enabled,
      # your tailnet base_domain is always the first search domain.
      search_domains: []
    
      # Extra DNS records
      # so far only A and AAAA records are supported (on the tailscale side)
      # See: docs/ref/dns.md
      extra_records: []
      #   - name: "grafana.myvpn.example.com"
      #     type: "A"
      #     value: "100.64.0.3"
      #
      #   # you can also put it in one line
      #   - { name: "prometheus.myvpn.example.com", type: "A", value: "100.64.0.3" }
      #
      # Alternatively, extra DNS records can be loaded from a JSON file.
      # Headscale processes this file on each change.
      # extra_records_path: /var/lib/headscale/extra-records.json
    
    # Unix socket used for the CLI to connect without authentication
    # Note: for production you will want to set this to something like:
    unix_socket: /var/run/headscale/headscale.sock
    unix_socket_permission: "0770"
    #
    # headscale supports experimental OpenID connect support,
    # it is still being tested and might have some bugs, please
    # help us test it.
    # OpenID Connect
    # oidc:
    #   only_start_if_oidc_is_available: true
    #   issuer: "https://your-oidc.issuer.com/path"
    #   client_id: "your-oidc-client-id"
    #   client_secret: "your-oidc-client-secret"
    #   # Alternatively, set `client_secret_path` to read the secret from the file.
    #   # It resolves environment variables, making integration to systemd's
    #   # `LoadCredential` straightforward:
    #   client_secret_path: "${CREDENTIALS_DIRECTORY}/oidc_client_secret"
    #   # client_secret and client_secret_path are mutually exclusive.
    #
    #   # The amount of time from a node is authenticated with OpenID until it
    #   # expires and needs to reauthenticate.
    #   # Setting the value to "0" will mean no expiry.
    #   expiry: 180d
    #
    #   # Use the expiry from the token received from OpenID when the user logged
    #   # in, this will typically lead to frequent need to reauthenticate and should
    #   # only been enabled if you know what you are doing.
    #   # Note: enabling this will cause `oidc.expiry` to be ignored.
    #   use_expiry_from_token: false
    #
    #   # Customize the scopes used in the OIDC flow, defaults to "openid", "profile" and "email" and add     custom query
    #   # parameters to the Authorize Endpoint request. Scopes default to "openid", "profile" and "email".
    #
    #   scope: ["openid", "profile", "email", "custom"]
    #   extra_params:
    #     domain_hint: example.com
    #
    #   # List allowed principal domains and/or users. If an authenticated user's domain is not in this list,     the
    #   # authentication request will be rejected.
    #
    #   allowed_domains:
    #     - example.com
    #   # Note: Groups from keycloak have a leading '/'
    #   allowed_groups:
    #     - /headscale
    #   allowed_users:
    #     - alice@example.com
    #
    #   # If `strip_email_domain` is set to `true`, the domain part of the username email address will be     removed.
    #   # This will transform `first-name.last-name@example.com` to the user `first-name.last-name`
    #   # If `strip_email_domain` is set to `false` the domain part will NOT be removed resulting to the     following
    #   user: `first-name.last-name.example.com`
    #
    #   strip_email_domain: true
    
    # Logtail configuration
    # Logtail is Tailscales logging and auditing infrastructure, it allows the control panel
    # to instruct tailscale nodes to log their activity to a remote server.
    logtail:
      # Enable logtail for this headscales clients.
      # As there is currently no support for overriding the log server in headscale, this is
      # disabled by default. Enabling this will make your clients send logs to Tailscale Inc.
      enabled: false
    
    # Enabling this option makes devices prefer a random port for WireGuard traffic over the
    # default static port 41641. This option is intended as a workaround for some buggy
    # firewall devices. See https://tailscale.com/kb/1181/firewalls/ for more information.
    randomize_client_port: false
  vn-etcvn-headscalevn-derpvn-yaml: |-
    regions:

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-headplane-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
    cloud.sealos.io/app-deploy-manager-domain: headscale-${{ defaults.app_suffix }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /admin
            backend:
              service:
                name: headscale-${{ defaults.app_suffix }}
                port:
                  number: 3000
  tls:
    - hosts:
        - headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
    cloud.sealos.io/app-deploy-manager-domain: headscale-${{ defaults.app_suffix }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: headscale-${{ defaults.app_suffix }}
                port:
                  number: 8080
  tls:
    - hosts:
        - headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-redirect-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
    cloud.sealos.io/app-deploy-manager-domain: headscale-redirect-${{ defaults.app_suffix }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    higress.io/temporal-redirect: 'https://headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}/admin'
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
spec:
  rules:
    - host: headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Exact
            path: /
            backend:
              service:
                name: headscale-${{ defaults.app_suffix }}
                port:
                  number: 8080
  tls:
    - hosts:
        - headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-grpc-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
    cloud.sealos.io/app-deploy-manager-domain: headscale-grpc-${{ defaults.app_suffix }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
spec:
  rules:
    - host: headscale-grpc-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: headscale-${{ defaults.app_suffix }}
                port:
                  number: 50443
  tls:
    - hosts:
        - headscale-grpc-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: app.sealos.io/v1
kind: App
metadata:
  name: headscale-${{ defaults.app_suffix }}
  labels:
    cloud.sealos.io/app-deploy-manager: headscale-${{ defaults.app_suffix }}
spec:
  data:
    url: https://headscale-${{ defaults.app_suffix }}.${{ SEALOS_CLOUD_DOMAIN }}/admin
  displayType: normal
  icon: "https://raw.githubusercontent.com/juanfont/headscale/main/docs/logo/headscale3-dots.svg"
  name: "Headscale"
  type: link