apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: rocketchat-micro
spec:
  title: 'Rocket.Chat Microservices'
  url: 'https://rocket.chat/'
  gitRepo: 'https://github.com/RocketChat/Rocket.Chat'
  author: 'Sealos'
  description: 'Rocket.Chat Microservices is an enterprise-grade, open-source communication platform built with a microservices architecture for superior scalability and performance. Ideal for organizations requiring high availability and horizontal scaling capabilities.'
  readme: 'https://raw.githubusercontent.com/RocketChat/Rocket.Chat/develop/README.md'
  icon: 'https://avatars.githubusercontent.com/u/12508788?s=48&v=4'
  templateType: inline
  locale: en
  i18n:
    zh:
      title: 'Rocket.Chat (微服务版)'
      description: 'Rocket.Chat 微服务版本是一个开源的、完全可定制的通信平台，采用微服务架构提供更好的可扩展性和性能。适用于对数据保护有高标准要求的组织。'
  categories:
    - tool
  defaults:
    app_name:
      type: string
      value: rocketchat-ms-${{ random(8) }}
    app_host:
      type: string
      value: ${{ random(8) }}

---
# MongoDB Database
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mongo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mongo
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/instance: ${{ defaults.app_name }}-mongo
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-mongo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-mongo
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-mongo

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: mongodb
    clusterversion.kubeblocks.io/name: mongodb-6.0
    sealos-db-provider-cr: ${{ defaults.app_name }}-mongo
  annotations: {}
  name: ${{ defaults.app_name }}-mongo
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: mongodb
  clusterVersionRef: mongodb-6.0
  componentSpecs:
    - componentDefRef: mongodb
      monitor: true
      name: mongodb
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 50m
          memory: 51Mi
      serviceAccountName: ${{ defaults.app_name }}-mongo
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
  terminationPolicy: Delete
  tolerations: []

---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${{ defaults.app_name }}-mongo-init
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: mongo-init
          image: mongo:6.0
          env:
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mongo-conn-credential
                  key: password
            - name: MONGO_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mongo-conn-credential
                  key: host
          command:
            - /bin/bash
            - -c
            - |
              # Wait for MongoDB to be ready
              until mongosh "mongodb://root:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_HOST}:27017/admin" --eval "db.adminCommand('ping')" &>/dev/null; do
                echo "Waiting for MongoDB..."
                sleep 2
              done
              
              # Create rocketchat database and user
              mongosh "mongodb://root:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_HOST}:27017/admin" <<EOF
              use rocketchat
              db.createUser({
                user: "rocketchat",
                pwd: "rocketchat",
                roles: [
                  { role: "readWrite", db: "rocketchat" },
                  { role: "clusterMonitor", db: "admin" }
                ]
              })
              EOF
          resources:
            requests:
              cpu: 10m
              memory: 51Mi
            limits:
              cpu: 100m
              memory: 512Mi
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300

---
# ConfigMap for all application configs
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${{ defaults.app_name }}-nats
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-nats
data:
  vn-etcvn-natsvn-configvn-natsvn-conf: |
    # NATS Clients Port
    port: 4222

    # PID file shared with configuration reloader.
    pid_file: "/var/run/nats/nats.pid"

    ###############
    #             #
    # Monitoring  #
    #             #
    ###############
    http: 8222
    server_name:$POD_NAME
    ###################################
    #                                 #
    # NATS Full Mesh Clustering Setup #
    #                                 #
    ###################################
    cluster {
      port: 6222

      routes = [
        nats://${{ defaults.app_name }}-nats-0.${{ defaults.app_name }}-nats.${{ SEALOS_NAMESPACE }}.svc.cluster.local:6222,
        nats://${{ defaults.app_name }}-nats-1.${{ defaults.app_name }}-nats.${{ SEALOS_NAMESPACE }}.svc.cluster.local:6222,
      ]
      cluster_advertise: $CLUSTER_ADVERTISE

      connect_retries: 120
    }
    lame_duck_grace_period: 10s
    lame_duck_duration: 30s

---
# Main Rocket.Chat Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}
  annotations:
    originImageName: rocketchat/rocket.chat:7.9.0
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    app: ${{ defaults.app_name }}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: ${{ defaults.app_name }}
          image: rocketchat/rocket.chat:7.9.0
          imagePullPolicy: IfNotPresent
          env:
            - name: DEPLOY_PLATFORM
              value: sealos-microservices
            - name: INSTANCE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MONGO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mongo-conn-credential
                  key: password
            - name: MONGO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-mongo-conn-credential
                  key: endpoint
            - name: MONGO_URL
              value: mongodb://rocketchat:rocketchat@$(MONGO_ENDPOINT)/rocketchat?replicaSet=${{ defaults.app_name }}-mongo-mongodb
            - name: MONGO_OPLOG_URL
              value: mongodb://root:$(MONGO_ROOT_PASSWORD)@$(MONGO_ENDPOINT)/local?replicaSet=${{ defaults.app_name }}-mongo-mongodb&authSource=admin
            - name: ROOT_URL
              value: "https://${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}"
            - name: OVERWRITE_SETTING_Prometheus_Enabled
              value: "true"
            - name: OVERWRITE_SETTING_Prometheus_Port
              value: "9100"
            - name: MS_METRICS
              value: "true"
            - name: MS_METRICS_PORT
              value: "9458"
            - name: TRANSPORTER
              value: nats://${{ defaults.app_name }}-nats:4222
            - name: MOLECULER_LOG_LEVEL
              value: "warn"
            - name: HEARTBEAT_INTERVAL
              value: "10"
            - name: HEARTBEAT_TIMEOUT
              value: "30"
            - name: RETRY_ENABLED
              value: 'yes'
          ports:
            - name: http
              containerPort: 3000
            - name: metrics
              containerPort: 9100
            - name: ms-metrics
              containerPort: 9458
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1024Mi

---
# NATS StatefulSet for microservices communication
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-nats
  annotations:
    originImageName: nats:2.4-alpine
    deploy.cloud.sealos.io/minReplicas: '2'
    deploy.cloud.sealos.io/maxReplicas: '2'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-nats
    app: ${{ defaults.app_name }}-nats
spec:
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-nats
  replicas: 2
  revisionHistoryLimit: 1
  serviceName: ${{ defaults.app_name }}-nats
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-nats
    spec:
      automountServiceAccountToken: false
      volumes:
      - name: vn-etcvn-natsvn-configvn-natsvn-conf
        configMap:
          name: ${{ defaults.app_name }}-nats
          items:
            - key: vn-etcvn-natsvn-configvn-natsvn-conf
              path: ./etc/nats-config/nats.conf
          defaultMode: 420
      - name: pid
        emptyDir: {}

      shareProcessNamespace: true
      terminationGracePeriodSeconds: 60
      containers:
      - name: ${{ defaults.app_name }}-nats
        image: nats:2.4-alpine
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 128Mi
        ports:
        - containerPort: 4222
          name: client
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics

        command:
        - "nats-server"
        - "--config"
        - "/etc/nats-config/nats.conf"

        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVER_NAME
          value: $(POD_NAME)
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(POD_NAME).${{ defaults.app_name }}-nats.$(POD_NAMESPACE).svc.cluster.local
        volumeMounts:
        - name: vn-etcvn-natsvn-configvn-natsvn-conf
          mountPath: /etc/nats-config/nats.conf
          subPath: ./etc/nats-config/nats.conf
        - name: pid
          mountPath: /var/run/nats

        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 30

        lifecycle:
          preStop:
            exec:
              command:
              - "nats-server"
              - "-sl=ldm=/var/run/nats/nats.pid"

      - name: ${{ defaults.app_name }}-nats-reloader
        image: natsio/nats-server-config-reloader:0.6.3
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
        command:
        - "nats-server-config-reloader"
        - "-pid"
        - "/var/run/nats/nats.pid"
        - "-config"
        - "/etc/nats-config/nats.conf"
        volumeMounts:
        - name: vn-etcvn-natsvn-configvn-natsvn-conf
          mountPath: /etc/nats-config/nats.conf
          subPath: ./etc/nats-config/nats.conf
        - name: pid
          mountPath: /var/run/nats

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP
    - name: metrics
      port: 9100
      targetPort: 9100
      protocol: TCP
    - name: ms-metrics
      port: 9458
      targetPort: 9458
      protocol: TCP
  selector:
    app: ${{ defaults.app_name }}

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-nats
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-nats
spec:
  selector:
    app: ${{ defaults.app_name }}-nats
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: client
    port: 4222
  - name: cluster
    port: 6222
  - name: monitor
    port: 8222
  - name: metrics
    port: 7777
  - name: leafnodes
    port: 7422
  - name: gateways
    port: 7522

---
# Account Microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-account
  annotations:
    originImageName: rocketchat/account-service:7.9.0
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-account
    app: ${{ defaults.app_name }}-account
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-account
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-account
    spec:
      automountServiceAccountToken: false
      containers:
      - name: ${{ defaults.app_name }}-account
        image: rocketchat/account-service:7.9.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: password
        - name: MONGO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: endpoint
        - name: MONGO_URL
          value: mongodb://rocketchat:rocketchat@$(MONGO_ENDPOINT)/rocketchat?replicaSet=${{ defaults.app_name }}-mongo-mongodb
        - name: TRANSPORTER
          value: nats://${{ defaults.app_name }}-nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: "warn"
        - name: HEARTBEAT_INTERVAL
          value: "10"
        - name: HEARTBEAT_TIMEOUT
          value: "30"
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: "true"
        - name: MS_METRICS_PORT
          value: "9458"
        ports:
        - name: ms-metrics
          containerPort: 9458
        resources:
          requests:
            cpu: 10m
            memory: 12Mi
          limits:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-account
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-account
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    app: ${{ defaults.app_name }}-account

---
# Authorization Microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-authorization
  annotations:
    originImageName: rocketchat/authorization-service:7.9.0
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-authorization
    app: ${{ defaults.app_name }}-authorization
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-authorization
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-authorization
    spec:
      automountServiceAccountToken: false
      containers:
      - name: ${{ defaults.app_name }}-authorization
        image: rocketchat/authorization-service:7.9.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: password
        - name: MONGO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: endpoint
        - name: MONGO_URL
          value: mongodb://rocketchat:rocketchat@$(MONGO_ENDPOINT)/rocketchat?replicaSet=${{ defaults.app_name }}-mongo-mongodb
        - name: TRANSPORTER
          value: nats://${{ defaults.app_name }}-nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: "warn"
        - name: HEARTBEAT_INTERVAL
          value: "10"
        - name: HEARTBEAT_TIMEOUT
          value: "30"
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: "true"
        - name: MS_METRICS_PORT
          value: "9458"
        ports:
        - name: ms-metrics
          containerPort: 9458
        resources:
          requests:
            cpu: 10m
            memory: 12Mi
          limits:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-authorization
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-authorization
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    app: ${{ defaults.app_name }}-authorization

---
# DDP Streamer Microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-ddp-streamer
  annotations:
    originImageName: rocketchat/ddp-streamer-service:7.9.0
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-ddp-streamer
    app: ${{ defaults.app_name }}-ddp-streamer
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-ddp-streamer
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-ddp-streamer
    spec:
      automountServiceAccountToken: false
      containers:
      - name: ${{ defaults.app_name }}-ddp-streamer
        image: rocketchat/ddp-streamer-service:7.9.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: password
        - name: MONGO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: endpoint
        - name: MONGO_URL
          value: mongodb://rocketchat:rocketchat@$(MONGO_ENDPOINT)/rocketchat?replicaSet=${{ defaults.app_name }}-mongo-mongodb
        - name: TRANSPORTER
          value: nats://${{ defaults.app_name }}-nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: "warn"
        - name: PORT
          value: '3000'
        - name: HEARTBEAT_INTERVAL
          value: "10"
        - name: HEARTBEAT_TIMEOUT
          value: "30"
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: "true"
        - name: MS_METRICS_PORT
          value: "9458"
        ports:
        - name: http
          containerPort: 3000
        - name: ms-metrics
          containerPort: 9458
        resources:
          requests:
            cpu: 10m
            memory: 12Mi
          limits:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-ddp-streamer
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-ddp-streamer
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http
    targetPort: 3000
    port: 3000
    protocol: TCP
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    app: ${{ defaults.app_name }}-ddp-streamer

---
# Presence Microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-presence
  annotations:
    originImageName: rocketchat/presence-service:7.9.0
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-presence
    app: ${{ defaults.app_name }}-presence
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-presence
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-presence
    spec:
      automountServiceAccountToken: false
      containers:
      - name: ${{ defaults.app_name }}-presence
        image: rocketchat/presence-service:7.9.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: password
        - name: MONGO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: endpoint
        - name: MONGO_URL
          value: mongodb://rocketchat:rocketchat@$(MONGO_ENDPOINT)/rocketchat?replicaSet=${{ defaults.app_name }}-mongo-mongodb
        - name: TRANSPORTER
          value: nats://${{ defaults.app_name }}-nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: "warn"
        - name: HEARTBEAT_INTERVAL
          value: "10"
        - name: HEARTBEAT_TIMEOUT
          value: "30"
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: "true"
        - name: MS_METRICS_PORT
          value: "9458"
        ports:
        - name: ms-metrics
          containerPort: 9458
        resources:
          requests:
            cpu: 10m
            memory: 12Mi
          limits:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-presence
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-presence
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    app: ${{ defaults.app_name }}-presence

---
# Stream Hub Microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-stream-hub
  annotations:
    originImageName: rocketchat/stream-hub-service:7.9.0
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-stream-hub
    app: ${{ defaults.app_name }}-stream-hub
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-stream-hub
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-stream-hub
    spec:
      automountServiceAccountToken: false
      containers:
      - name: ${{ defaults.app_name }}-stream-hub
        image: rocketchat/stream-hub-service:7.9.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: password
        - name: MONGO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ${{ defaults.app_name }}-mongo-conn-credential
              key: endpoint
        - name: MONGO_URL
          value: mongodb://rocketchat:rocketchat@$(MONGO_ENDPOINT)/rocketchat?replicaSet=${{ defaults.app_name }}-mongo-mongodb
        - name: MONGO_OPLOG_URL
          value: mongodb://root:$(MONGO_ROOT_PASSWORD)@$(MONGO_ENDPOINT)/local?replicaSet=${{ defaults.app_name }}-mongo-mongodb&authSource=admin
        - name: TRANSPORTER
          value: nats://${{ defaults.app_name }}-nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: "warn"
        - name: HEARTBEAT_INTERVAL
          value: "10"
        - name: HEARTBEAT_TIMEOUT
          value: "30"
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: "true"
        - name: MS_METRICS_PORT
          value: "9458"
        ports:
        - name: ms-metrics
          containerPort: 9458
        resources:
          requests:
            cpu: 10m
            memory: 12Mi
          limits:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-stream-hub
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-stream-hub
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    app: ${{ defaults.app_name }}-stream-hub

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    cloud.sealos.io/app-deploy-manager-domain: ${{ defaults.app_host }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}
                port:
                  number: 3000
          - pathType: Prefix
            path: /sockjs
            backend:
              service:
                name: ${{ defaults.app_name }}-ddp-streamer
                port:
                  number: 3000
          - pathType: Prefix
            path: /websocket
            backend:
              service:
                name: ${{ defaults.app_name }}-ddp-streamer
                port:
                  number: 3000
  tls:
    - hosts:
        - ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
# App
apiVersion: app.sealos.io/v1
kind: App
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  data:
    url: https://${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
  displayType: normal
  icon: "https://avatars.githubusercontent.com/u/12508788?s=48&v=4"
  name: 'Rocket.Chat Microservices'
  type: link