apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: elasticsearch
spec:
  title: "Elasticsearch"
  url: "https://github.com/elastic/helm-charts"
  gitRepo: "https://github.com/elastic/helm-charts"
  author: "Elasticsearch"
  description: "Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fineâ€‘tuned relevancy, and powerful analytics that scale with ease."
  readme: "https://raw.githubusercontent.com/elastic/helm-charts/main/README.md"
  icon: "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt549f7d977c2a88f4/5d082d34616162aa5a85707d/logo-enterprise-search-32-color.svg"
  templateType: inline
  defaults:
    app_name:
      type: string
      value: es-${{ random(4) }}
    elasticsearch_passwd:
      type: string
      value: ${{ random(24) }}
  inputs:
    elasticsearch_storage:
      description: "Storage size for elasticsearch in Gi"
      type: number
      default: "5"
      required: true
    domain:
      description: "the domain of laf"
      type: string
      default: ${{ random(8) }}
      required: true
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: ${{ defaults.app_name }}-certs
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-master
    app: ${{ defaults.app_name }}-master
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpakNDQW5LZ0F3SUJBZ0lSQUttdUZqNTFzYnRORUZmb3psM3U1UzB3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlNekV4TWpBd01USXhORGhhRncweQpOREV4TVRrd01USXhORGhhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0SHMwSHBpSHVwS1AwTWtlcU1IYUxGOU4KTFpLLzYrQlE3ZzZQektOdXZ0ZFVEdUhlQXRzY0ZsQlNpd1p6RXVYWE9LNWRWUjdqaUE2b3k1eXhHVlY3NzZNLwpaVnd6cXZTU25TekdnOWhySC9oNmxoL0ZFOG5pdkRYaDM0NTBtbnJXOVprSWUvNmxtZHZGK0F4VUlqSGQ5RWUrCkZNSzR2UnF5QW5Td2FjNXpteE01R0hjU1Uwb241ek5LMkNUK1lqOS9sc1ZGcld6Wjd3aUt0L1R4YTVYTXdPM0UKS0hXRTlWWitmd2Y5TVdmK1JlSy9JWkRlbytzVDdRbTZkYTVOSmRnSmdndTFCSjIybCs5dFY0ejRWVTJKeCtVQQo2QzFqbEhSb3NiOVV5aktrNElRNmhIbndTVkhDcHVIY3M5RmFyQVJSS3NveThRakJBd1cyMVAyNGlEd3ZDd0lECkFRQUJvNEhFTUlIQk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlQxMVlrWUx1cldJN1BNMUh6OAo1L1FYOU81elVUQmhCZ05WSFJFRVdqQllnaFJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY29JZFpXeGhjM1JwClkzTmxZWEpqYUMxdFlYTjBaWEl1Ym5NdFlXUnRhVzZDSVdWc1lYTjBhV056WldGeVkyZ3RiV0Z6ZEdWeUxtNXoKTFdGa2JXbHVMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUVMQ0cyclpMcmMxYVpsalJJb3ZjT3dTRApSaWwxTXhCNlExSnJmRVRVY1VTOGpUQi9WNGtmZ1FULzBCT3hXZWxQcktSbUVGcEMzTEUxNXRDV1JjM2J0dU00CkpDMGJLMW91T1FQR01rOUVOTTUyVjNaQjBWLzZPZFJ5SFB6YWNjYXVoUG1YSnpSMnpNUW5mTlBuZWNiN3RSMFEKVHZyOW95dUpKWXZQQ0J1N0RqTUx6TDRmWTdMVlo1UGh1czdEbTErcGtLRllwVGx0RFpaenk4b1k4dmZ1L093LwpBMTNIdyt1ekFpSUlrcURYQUo5OVhmUlo1Um5yYmhTbS9uckt6R2R4RUdSOTFISUlpUTZ0QUk5NWxMWHNDK2FZCmpXQ0pWSTJCekVPM0NLdDJRblZJY2o3cWw4M2JsK0FJWUNjTkpZc2lyT0lKWDRWZG8yN0U2S1h2MFRYUk13PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdEhzMEhwaUh1cEtQME1rZXFNSGFMRjlOTFpLLzYrQlE3ZzZQektOdXZ0ZFVEdUhlCkF0c2NGbEJTaXdaekV1WFhPSzVkVlI3amlBNm95NXl4R1ZWNzc2TS9aVnd6cXZTU25TekdnOWhySC9oNmxoL0YKRThuaXZEWGgzNDUwbW5yVzlaa0llLzZsbWR2RitBeFVJakhkOUVlK0ZNSzR2UnF5QW5Td2FjNXpteE01R0hjUwpVMG9uNXpOSzJDVCtZajkvbHNWRnJXelo3d2lLdC9UeGE1WE13TzNFS0hXRTlWWitmd2Y5TVdmK1JlSy9JWkRlCm8rc1Q3UW02ZGE1TkpkZ0pnZ3UxQkoyMmwrOXRWNHo0VlUySngrVUE2QzFqbEhSb3NiOVV5aktrNElRNmhIbncKU1ZIQ3B1SGNzOUZhckFSUktzb3k4UWpCQXdXMjFQMjRpRHd2Q3dJREFRQUJBb0lCQUNnYTFJc1Q4OTAyb2pTUAo3SHN0a0hDWndNbW11WFVOeEk0UnVFeU42SmNKdkVrT1Vjb3FyRVFkRnlxRGhXQ21xRHVWSzNJMXlmTzY1akZRCm9WM3l5L2FGUFJvbDhlbEVMYXcxZmV0Z1ZQV212bjdMa255Q09Sci9rakNlTkRUN3BQYXdTZDFieWFxMTFuajMKTEY3bzI5eGpjTTZtTW16N0dLRkpFc2FBTk5vNWZGcy9pVGZyRDJKOTg5S2JoV2ZiVG1hRmxCTVQ1dFFSZHpaegp1NTl3Z0xhY0ozV0piMzRlZFZVL3pUdFdueUxKTGJHdFBOQWp6cjVpclU5ellHaUhXQ0RRRW5xeWN1czNpQks2CjRNRmcwTGFzak1nbUZsNFVhbGU3TGp6UXJNL1dsRlRqUTVBaTUwbzFPKzZ4NlN3a2Y5TzZCc0h4WHVvei81L3gKVExuQTgya0NnWUVBdzUwY255VDNqRSs0S2duK3pzcEFmSmNuTHVBSE9KZ0xFZU5FYndmUFluUnB5dmpZdDdTYQoyaU03aUgrbStsY0QxMStIcWsyQ3c1bXZFcGduTktrYU9hWktQOUF4ZEozMy9LYThnWWsvNnBEUWJwZTJ4dzFDClBURFRhb0M1NE9keHlXZmFZUW5wUHBZMzR1T3RuVGpSLzBINHUxa255Uy95UGxPM2RyenNWQ1VDZ1lFQTdESTEKdURqejlVM2ZaRjVLQytKeWlQZ3pISk1BS3NWM3VrS3kxQk5NRUdxaFhTbDZ0MG1GOHN6aGREd2VoclpRY0RVRgpJcGdKS1d1YS85elAvMVZzQ3BxZmE0N2Q5dEM4Z3M5UWUxengrQWcrN2EwMkd4TXVBNC9mTk0yMzgwUzVhM3AzClM5TnkzTCtIVTFmVlJVZklYNEx2SWJRdHFyYTlsWERTYjZnRTkyOENnWUVBa0RqREJIYmQ2TjVSMnZUWm9COHcKSW12VElOVmRuWlZEL0NGQ3NGWGl5aVVvWnRUSCs5RzFwZ1Q1L0s2Wkx0Tis2b2p0WGx1ZGdKZExvL3I0VlBRawplTUtvMVptckRONzNHcGpZUE8wemFiN3hYY2lQb3Z5Y2pMNzE4UDBOanNzMWNwZ1dReHRxazVGdmpPSHVmQStMCmpKWllTOUQwNjNsbE1oekpGRXRBTnQwQ2dZRUF2dHg3NkZldFcwWUlCSFRrNU9HaHArallkSGlkSS9MWm90dU8KNGl5TnhKNUZzcUI0RjNBRUc0VlBrYnVhOTBTUGozeG9uK0czVlk4c2V5RVZ1c0J1UTh0YWszR3BEMjd4UmNyOAp3Qk1GUEdaOVkxWWFhSnFCRGtQT0hEODRMQTRXdnpFQkFYYm1WRmM0cFRKT2xtTkJHVjBXbTJlYmwxMS9xU2k0CkE1NEVGV1VDZ1lFQWswRHU2SVBpYnlOSFVuTGJUYmhQdnlLNm1nTjFyb3FJVmlsZ2t2Yk0vOUM5QSs2NXNmSjUKSVA2RGxqRDFJUmIvR0V1WGl6UHJweHJlbklsa3VibkRwYXhpdTBCZXhHWHg0aEdZcUhURzBxcU5USHAvNDV5bQpiSExDRFB2eERQdEhlMWpmOXBwYzgxcXk0eHhYYVFweUZ0UHUwdFlxUlIxNUNBaWNGdzZ5RitzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUlrN1BLQ21nT0ZhSWpTa09SOW5YV293RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlNekV4TWpBd01USXhORGRhRncweQpOREV4TVRrd01USXhORGRhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVjRrMnM5K1VlbUxkUDh2Nk1aRW9PVG05Qm9oVUoKWEpTNVZrZ3dOMUkxNzJmUHZLclRXbTBEQ1VNSER6TE1ITnc0cmd4Z2RmalhqdjhZZ2o4SnQvWTU1NjluNnpXZwprdzg5WG5DWnpwc2F3Wkg3YVJzM25iN29qejBuNG5BTVlubjR6VEY1TTdUTUJTd2krQy9iRlNEV1VuTTN2eStlCmVLeGExT3NOTTE2YUkyVnlQSU9MQkJYdWRjRXgxMjJDT1l5NFJMY2ZJS3M0dFc0Z3Q2SDFuUUJNTzZxRVlrbTgKSy9sVk9hRlRRODFGWFVkYzZvUzlSTkdVZHh5U21Idzc5ZnJkdCtOdzIySlNMbjdBdnR0TFNPc1pwNHdjTUp4TAo3N2IyNHhQVWFXZjBTdy9rc3RGSjE0SjA2ZEl3MGRieGpsUFhiL0EwbllPT3BDbk45bTRrYTczNUFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVTlkV0pHQzdxMWlPenpOUjgvT2YwRi9UdQpjMUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUhEZEpPTlVRbXljM1lBR0ZtRVhHb0J4Mk1hVWZyNktUVnN1Cm01Sy9seUlMT1crVndxYURVYm9QR2RBdHF4VTdCMkdaQlNFUWoyWkZ1eEE4RE5oMnJ5aGNEbnEzYkRNOVQ0Q0oKUUUxZkh3SmVVaW9RaUxqSk1DU3AxbUhqZnJxUFI0RVpCZHAvWExYdXMzS1V5R2NadWM3RU55elNqQ0htS2xPbwpDeFF3YjlQMmJGVUN3NDIvdUk0UHF1R1Qzc3R1SlhjeHRBam1FaUhmN3RHcHg5blFWZEZxbXo1K0lIMFhuS1p1Ck1UdDlnYzluUzlQaWhCbVV0NldPbldEN1FMS2QyT3o0ZTE4S0dlbGN5SGlvSFV0SFlWcU93MFVXSUlTRG5YTWMKTWVaMDBPY1Q5ckVHWFd3dHNScUNJOUluSk5teTF5VXdmNEc4eHV1cUlXUlE2emJkQ3lvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ${{ defaults.app_name }}-credentials
  labels:
    app: ${{ defaults.app_name }}-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-master
type: Opaque
stringData:
  username: elastic
  password: ${{ defaults.elasticsearch_passwd }}
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: ${{ defaults.app_name }}-master
  labels:
    app: ${{ defaults.app_name }}-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-master
spec:
  type: ClusterIP
  selector:
    app: ${{ defaults.app_name }}-master
  publishNotReadyAddresses: false
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: ${{ defaults.app_name }}-master-headless
  labels:
    app: ${{ defaults.app_name }}-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: ${{ defaults.app_name }}-master
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-master
  labels:
    app: ${{ defaults.app_name }}-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-master
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: ${{ defaults.app_name }}-master-headless
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-master
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
        annotations:
          value: " ${{ inputs.elasticsearch_storage }} "
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${{ inputs.elasticsearch_storage }}Gi
  template:
    metadata:
      name: ${{ defaults.app_name }}-master
      labels:
        app: ${{ defaults.app_name }}-master
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - ${{ defaults.app_name }}-master
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: ${{ defaults.app_name }}-certs
      enableServiceLinks: true
      containers:
        - name: ${{ defaults.app_name }}-master
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e

                  # Exit if ELASTIC_PASSWORD in unset
                  if [ -z "${ELASTIC_PASSWORD}" ]; then
                    echo "ELASTIC_PASSWORD variable is missing, exiting"
                    exit 1
                  fi

                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s

                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi

                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                    curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                  }

                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi

                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: "${{ defaults.app_name }}-master-0,"
            - name: node.roles
              value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
            - name: discovery.seed_hosts
              value: ${{ defaults.app_name }}-master-headless
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-credentials
                  key: password
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
          volumeMounts:
            - name: "elasticsearch-master"
              mountPath: /usr/share/elasticsearch/data
            - name: elasticsearch-certs
              mountPath: /usr/share/elasticsearch/config/certs
              readOnly: true
---
# kibana
# Source: kibana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
spec:
  type: ClusterIP
  ports:
    - port: 5601
      protocol: TCP
      name: http
      targetPort: 5601
  selector:
    app: ${{ defaults.app_name }}-kibana
---
# Source: kibana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-kibana
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}-kibana
    spec:
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1000
      volumes:
        - name: kibana-tokens
          emptyDir: {}
        - name: elasticsearch-certs
          secret:
            secretName: ${{ defaults.app_name }}-certs
      containers:
        - name: ${{ defaults.app_name }}-kibana
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/kibana/kibana:8.5.1"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: ELASTICSEARCH_HOSTS
              value: https://${{ defaults.app_name }}-master:9200
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: "/usr/share/kibana/config/certs/ca.crt"
            - name: SERVER_HOST
              value: "0.0.0.0"
            - name: ELASTICSEARCH_SERVICEACCOUNTTOKEN
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-kibana-token
                  key: token
                  optional: false
            - name: NODE_OPTIONS
              value: --max-old-space-size=1800
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
            exec:
              command:
                - bash
                - -c
                - |
                  #!/usr/bin/env bash -e

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Kibana Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                      local path="${1}"
                      set -- -XGET -s --fail -L

                      if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                        set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                      fi

                      STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                      if [[ "${STATUS}" -eq 200 ]]; then
                        exit 0
                      fi

                      echo "Error: Got HTTP code ${STATUS} but expected a 200"
                      exit 1
                  }

                  http "/app/kibana"
          ports:
            - containerPort: 5601
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: elasticsearch-certs
              mountPath: /usr/share/kibana/config/certs
              readOnly: true
            - name: kibana-tokens
              mountPath: /usr/share/kibana/config/tokens
              readOnly: true
---
# Source: kibana/templates/pre-install-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
---
# Source: kibana/templates/configmap-helm-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${{ defaults.app_name }}-kibana-scripts
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
data:
  manage-es-token.js: |
    const https = require('https');
    const fs = require('fs');

    // Read environment variables
    function getEnvVar(name) {
      if (!process.env[name]) {
        throw new Error(name + ' environment variable is missing')
      }
      return process.env[name]
    }

    // Elasticsearch API
    const esPath = '_security/service/elastic/kibana/credential/token/kibana-kibana';
    const esUrl = 'https://${{ defaults.app_name }}-master:9200' + '/' + esPath
    const esUsername = getEnvVar('ELASTICSEARCH_USERNAME');
    const esPassword = getEnvVar('ELASTICSEARCH_PASSWORD');
    const esAuth = esUsername + ':' + esPassword;
    const esCaFile = getEnvVar('ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES');
    const esCa = fs.readFileSync(esCaFile);

    // Kubernetes API
    const k8sHostname = getEnvVar('KUBERNETES_SERVICE_HOST');
    const k8sPort = getEnvVar('KUBERNETES_SERVICE_PORT_HTTPS');
    const k8sPostSecretPath = 'api/v1/namespaces/${{ SEALOS_NAMESPACE }}/secrets';
    const k8sDeleteSecretPath = 'api/v1/namespaces/${{ SEALOS_NAMESPACE }}/secrets/${{ defaults.app_name }}-kibana-token';
    const k8sPostSecretUrl = `https://${k8sHostname}:${k8sPort}/${k8sPostSecretPath}`;
    const k8sDeleteSecretUrl = `https://${k8sHostname}:${k8sPort}/${k8sDeleteSecretPath}`;
    const k8sBearer = fs.readFileSync('/run/secrets/kubernetes.io/serviceaccount/token');
    const k8sCa = fs.readFileSync('/run/secrets/kubernetes.io/serviceaccount/ca.crt');

    // Post Data
    const esTokenDeleteOptions = {
      method: 'DELETE',
      auth: esAuth,
      ca: esCa,
    };
    const esTokenCreateOptions = {
      method: 'POST',
      auth: esAuth,
      ca: esCa,
    };
    const secretCreateOptions = {
      method: 'POST',
      ca: k8sCa,
      headers: {
        'Authorization': 'Bearer ' + k8sBearer,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      }
    };
    const secretDeleteOptions = {
      method: 'DELETE',
      ca: k8sCa,
      headers: {
        'Authorization': 'Bearer ' + k8sBearer,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      }
    };

    // With thanks to https://stackoverflow.com/questions/57332374/how-to-chain-http-request
    function requestPromise(url, httpsOptions, extraOptions = {}) {
      return new Promise((resolve, reject) => {
        const request = https.request(url, httpsOptions, response => {

          console.log('statusCode:', response.statusCode);

          let isSuccess = undefined;

          if (typeof(extraOptions.extraStatusCode) != "undefined" && extraOptions.extraStatusCode != null) {
            isSuccess = response.statusCode >= 200 && response.statusCode < 300 || response.statusCode == extraOptions.extraStatusCode;
          } else {
            isSuccess = response.statusCode >= 200 && response.statusCode < 300;
          }

          let data = '';
          response.on('data', chunk => data += chunk); // accumulate data
          response.once('end', () => isSuccess ? resolve(data) : reject(data));  // resolve promise here
        });

        request.once('error', err => {
          // This won't log anything for e.g. an HTTP 404 or 500 response,
          // since from HTTP's point-of-view we successfully received a
          // response.
          console.log(`${httpsOptions.method} ${httpsOptions.path} failed: `, err.message || err);
          reject(err);  // if promise is not already resolved, then we can reject it here
        });

        if (typeof(extraOptions.payload) != "undefined") {
          request.write(extraOptions.payload);
        }
        request.end();
      });
    }

    function createEsToken() {
      // Chaining requests
      console.log('Cleaning previous token');
      // 404 status code is accepted if there is no previous token to clean
      return requestPromise(esUrl, esTokenDeleteOptions, {extraStatusCode: 404}).then(() => {
        console.log('Creating new token');
        return requestPromise(esUrl, esTokenCreateOptions).then(response => {
          const body = JSON.parse(response);
          const token = body.token.value

          // Encode the token in base64
          const base64Token = Buffer.from(token, 'utf8').toString('base64');

          // Prepare the k8s secret
          const secretData = JSON.stringify({
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
              "namespace": "${{ SEALOS_NAMESPACE }}",
              "name": "${{ defaults.app_name }}-kibana-token",
            },
            "type": "Opaque",
            "data": {
              "token": base64Token,
            }
          })

          // Create the k8s secret
          console.log('Creating K8S secret');
          return requestPromise(k8sPostSecretUrl, secretCreateOptions, {payload: secretData})
        });
      });
    }

    function cleanEsToken() {
      // Chaining requests
      console.log('Cleaning token');
      return requestPromise(esUrl, esTokenDeleteOptions).then(() => {
        // Create the k8s secret
        console.log('Delete K8S secret');
        return requestPromise(k8sDeleteSecretUrl, secretDeleteOptions)
      });
    }

    const command = process.argv[2];
    switch (command) {
      case 'create':
        console.log('Creating a new Elasticsearch token for Kibana')
        createEsToken().catch(err => {
          console.error(err);
          process.exit(1);
        });
        break;
      case 'clean':
        console.log('Cleaning the Kibana Elasticsearch token')
        cleanEsToken().catch(err => {
          console.error(err);
          process.exit(1);
        });
        break;
      default:
        console.log('Unknown command');
        process.exit(1);
    }
---
# Source: kibana/templates/pre-install-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - update
---
# Source: kibana/templates/pre-install-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-kibana
    namespace: "${{ SEALOS_NAMESPACE }}"
roleRef:
  kind: Role
  name: ${{ defaults.app_name }}-kibana
  apiGroup: rbac.authorization.k8s.io
---
# Source: kibana/templates/pre-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    app: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
  annotations:
    "app.kubernetes.io/create-kibana-token": create-kibana-token
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: Never
      securityContext:
        fsGroup: 1000
      containers:
        - name: ${{ defaults.app_name }}-kibana
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/kibana/kibana:8.5.1"
          imagePullPolicy: "IfNotPresent"
          command: ["/usr/share/kibana/node/bin/node"]
          args:
            - /usr/share/kibana/helm-scripts/manage-es-token.js
            - create
          env:
            - name: "ELASTICSEARCH_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-credentials
                  key: username
            - name: "ELASTICSEARCH_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-credentials
                  key: password
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: "/usr/share/kibana/config/certs/ca.crt"
          volumeMounts:
            - name: elasticsearch-certs
              mountPath: /usr/share/kibana/config/certs
              readOnly: true
            - name: kibana-helm-scripts
              mountPath: /usr/share/kibana/helm-scripts
      serviceAccount: ${{ defaults.app_name }}-kibana
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: ${{ defaults.app_name }}-certs
        - name: kibana-helm-scripts
          configMap:
            name: ${{ defaults.app_name }}-kibana-scripts
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}-kibana
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-kibana
    cloud.sealos.io/app-deploy-manager-domain: kibana-${{ inputs.domain }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: kibana-${{ inputs.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /()(.*)
            backend:
              service:
                name: ${{ defaults.app_name }}-kibana
                port:
                  number: 5601
  tls:
    - hosts:
        - kibana-${{ inputs.domain }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}
