apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: elasticsearch
spec:
  title: "Elasticsearch"
  url: "https://github.com/elastic/helm-charts"
  gitRepo: "https://github.com/elastic/helm-charts"
  author: "Elasticsearch"
  description: "Free and Open, Distributed, RESTful Search Engine."
  readme: "https://jsd.onmicrosoft.cn/gh/elastic/helm-charts@main/README.md"
  icon: "https://jsd.onmicrosoft.cn/gh/elastic/elasticsearch@main/distribution/packages/rpm/src/main/resources/logo/elastic.gif"
  templateType: inline
  defaults:
    elasticsearch_passwd:
      type: string
      value: ${{ random(24) }}
    app_name:
      type: string
      value: elasticsearch-master
  inputs:
    elasticsearch_storage:
      description: "Storage size for elasticsearch in Gi"
      type: number
      default: "5"
      required: true
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    cloud.sealos.io/app-deploy-manager: elasticsearch-master
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpVENDQW5HZ0F3SUJBZ0lRTEpTUFNoZ2lYTHJiRzhoaXQ3SHU1VEFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSXpNVEV5TWpBM01EY3hPRm9YRFRJMApNVEV5TVRBM01EY3hPRm93SHpFZE1Cc0dBMVVFQXhNVVpXeGhjM1JwWTNObFlYSmphQzF0WVhOMFpYSXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRGhWQk0xRFJVZno4MFAxd09Md2thNVNXL1cKaGtDQjM0TzMweWprUEtkYnhmM1ZQZXpBOU1SR283KzhTM3JXcGFUOHczWUF0S0xxQ0NFZG04Y2RaQlhlSGpNQwpKNHBqMmRaRXk4ZlhDbUJ5R3Exd29MbWpwWFRNOFpxdGwyNXNWTEhvc1ZWTVlGTWNZcHBkNTk5NGliMFNhRE90Cm9zeFpTb3FjeE5sMFdPSUxDTjBrRE1MZ2Q2azE2dXpGS3ZoTE54aXBPeGJKRkpVVkIrZXpQdXRhbXhFaXZxbGUKeEEvaUhnVlpTbHhCNUJQZCs4eERtZHdKUFIwQWVVN0pSZnlFeS94VXFJZFJxSmtwd1E5SkhlbW1FZjNFYVFXSAptUEpkMHVMcER3NERwM09LaXBQaXYvbFlWNFIxOXFodC8rZ1d4S2dmYVRrTzRHWk5FODljeW9RUHRZRVZBZ01CCkFBR2pnY1F3Z2NFd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQm9hVDA3aUZBV01rOVRwckx5cQpwVHdJMjZDN01HRUdBMVVkRVFSYU1GaUNGR1ZzWVhOMGFXTnpaV0Z5WTJndGJXRnpkR1Z5Z2gxbGJHRnpkR2xqCmMyVmhjbU5vTFcxaGMzUmxjaTV1Y3kxaFpHMXBib0loWld4aGMzUnBZM05sWVhKamFDMXRZWE4wWlhJdWJuTXQKWVdSdGFXNHVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCNlBrc0V4UThMUjRmRm5idzVBeHcva3VReQpXdHl3amxFVFBpVWwzOGV1Rk5pSEN2ZU8zTTJway9rVHdiRWNjcWVuU0VPYjV5TXZzbWRmRTJZVTloUWdaOC95CklZc2I5N0tFb1c0dGcxYnR2NjE4a1E5WUhyZmZCb1RGalpsazBHTFF3U1MzWSt5eDFGVHVSU2NjdVhVem5Pb1kKUXB2bVJQMzBrd3A0VFQ3NjdDNjN3dGpLcGdUVW5SaU1JclhVSTlQRDBia1ZzMDF1SjNlcUJhajlnR0c1NUJUTwpsS2F2dDBrQnl5Uk5lZ0E5dUxiajlnUGlIbzhPVGl6ZUZBQmpscUZVNGdrcnhYekZmdmhBMWNieEZ5aTJyRHROClpndWFxUU9IRGsrdVg0UnlTcURzK3JlV2lnOHgrVy9yWDh5U0gzVU9OWVJ3RFUvWGFvRC9FMUJKSU9ObwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNFZRVE5RMFZIOC9ORDljRGk4Skd1VWx2MW9aQWdkK0R0OU1vNUR5blc4WDkxVDNzCndQVEVScU8vdkV0NjFxV2svTU4yQUxTaTZnZ2hIWnZISFdRVjNoNHpBaWVLWTluV1JNdkgxd3BnY2hxdGNLQzUKbzZWMHpQR2FyWmR1YkZTeDZMRlZUR0JUSEdLYVhlZmZlSW05RW1nenJhTE1XVXFLbk1UWmRGamlDd2pkSkF6Qwo0SGVwTmVyc3hTcjRTemNZcVRzV3lSU1ZGUWZuc3o3cldwc1JJcjZwWHNRUDRoNEZXVXBjUWVRVDNmdk1RNW5jCkNUMGRBSGxPeVVYOGhNdjhWS2lIVWFpWktjRVBTUjNwcGhIOXhHa0ZoNWp5WGRMaTZROE9BNmR6aW9xVDRyLzUKV0ZlRWRmYW9iZi9vRnNTb0gyazVEdUJtVFJQUFhNcUVEN1dCRlFJREFRQUJBb0lCQUNJaVltWisvTnc4MW91Mwp2c25GUElHRkpuUVJFbVNhUDVIeFl4aHdOOG9uVERTcGxOd0dPRldiS01pVmhwNU5xWmpBNDNkbjVlWWVKU1lmCkd5TFFycDlmWThySHdxY3RzTS9yTHZMY2w0K3hpdVNzOUhKZDlqdTF2Z0RlRjlSQllGSW55d3d1NjJnNVo3a2kKRHpCcmJVRUVtQStOd2ZjazI2cTBCMTBndWQyQnlYTjl0KytiSUtVeFBHK1BCczA3VWU4MGlwSTl0SDRVQ2NUeApsWi9CRXhISVFuYzFMSEMrSkxPcVZ1aU5HZXEyeElPcW4xSDQ1bVA2bTQ5Z0p6Y3hNdDJCQmY4eG01RHMzUElHCjIxMlRnOVg4VXNLQmVueWtpbGRoM0U1Q3lWSlBIeHI2Z2wxYTVhSzhSRnM2Ui9FODNiTUJsWm1xc1FWakdMVTUKWjBEdnlBRUNnWUVBNmdlSG5sWVFrTG1VdGE4aGRoN0xmR1QrU09hdnhTVFVNYlFBWTJsUjJMb3VqNHo5c3pFWQorTXdPZHNDOHJOSkRqOU9kdnlOM3dveVkxYTBhRGlsdDJvelgya1N5cHBuVVNxQkhJV2NxQ0ZDbTYrNXBhOUZqCkZUMW1rVWdZTCsyRmN6cVZHUXdBeUk5ZmJTSFUvUkQvRDNJQWtYWEVJdmdyZkt4b053ajdsMEVDZ1lFQTludHUKeG9zbUcvdjZsU0cweEh6Ukg4KzV4RzAzZGxBY1o1VlZYTXRjODI5OW9jWndQejhWYVZWYStxMW0zKzhIUTJOcwpkaG0veGpiS2FaWm5LOWpIU00xSTJacEd2WHRKQ0ZtSEJGM2dzOUNWSEU5dXVmWkpRUmJSY1dKQzh3ZmRSeTJYCnFERXVCTWZPSUg1VWdZVWgxVlFiRTJiRTcxOGRsLzRaWGVHZXFOVUNnWUIrUXYyNlFUakN2RDB0SUlWdkV3STUKNU1zRVRlRjYvWG0yTHlVZWZVMzVIY25ORFFZN1RUdnB6ejNtZCtuVFc4V3pyVG9vUzF4cmpDdFE3UWxucHBacwpHUnpEMTlpQzVlK1JLNVAwdzVINzFuZVlScEo5NXdRTUM0cHd5M0t4T1BhTXlvaHljUFZqUDJiK25BZ3JXS1lqCmtTQVpXbTR0WjdNZW1tM0hjNE01Z1FLQmdETDFEOURTUWIyMVdYZnRjUDdTUXpYTmJ6MXh5dTZWMzFsMjRSLy8KRnlkbzNGTk93RFFES2IwT0hYSUgyV1hnZCtMeHNpRzBieFplaTNoSzFPZVd1SlNQaEVrZ2dSRjVaSDdxYTJSMgp1QmJVdjQ4THlQdC9OR1BWZ05WdEdDUkFjdm5kTGlaaWpINEdoTkhvN0RXZXZZRHFFM0x1WXphTnRvT096OVc5CjZGeEZBb0dCQU1Ia2hPN1FCOWx3dTByNTRoeUhWcjJLM0s1NnEwKzhLam13UmdnQ2xPZzVYMWVxTTQ1OEVUdW4KSS9SKzZiT1pMbVZiYm9mM291YUJaYXNQM1hURFJ1aVdZUE1CcWh2V0pld2x3SDE1YnFxTzRPT0hmR0xJdG4yQQp2WWd0Tm4vRFlSNlhEM3Qzd0NRdkpaQVFnNEplT0V4UTZNazNkUWN4VVMwN29Xc01MRDRRCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRUUtzNVYydGVyWVZOVXJIdDlLMEN6VEFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSXpNVEV5TWpBM01EY3hPRm9YRFRJMApNVEV5TVRBM01EY3hPRm93R3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQVBZeUhyRmd5b0QzUGtrYy9la1hoSEdLaStxS1BCYnAKYWZQdUdJbVFmVHRrR2x6aGFISjdJeTNNWm9qUC9peXQzRlRZK0x2eE9Ec2JrZ0lyUUpXd2lHMnMyNnJ3MDNaZApscGhmN1JVTFJhOVovVEt0MGp4SFY5TTQxOWdlMnpSaWo2QWwzdVVIQ1AyRnhqVk1nWWp1RmlzS3dOYWxRZlVFCnNwQ1RxOWxXTnA0YktQMzJHaWVFQlFLZU5SRDhFbE5CSmtJbklBMmFUeUgyVEloeUlDSzBmNUdqSDUycnhLZVYKd3JFL0JIcTh6b21IUlZ0VE02N0tIb1hjOVJKZ1lOSUNmb29lREh2aS9mOWYrcFdyWDg4MXJtYk5XWEdjeHUydQpHUUxxQ0FrcXBJcFV3bjVIQW9TdlVZSG14d2dhREM4NjZmanNneHYvNkRNREp1R1BtZnNCcVFNQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJRYUdrOU80aFFGakpQVTZheThxcVU4Q051Zwp1ekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZlpVZXNpbmZwMWplU3FmSEJTUEhPZ1oxcS92OHhvQ2xFUFJsCnd6aDhzYkwxNGl1dVNiMTkwSjh6UWVmdnp4QzdpcDRrVkNWVFc1MmZCWk55b01wdmowY1hLV1JHRm16M3lISXMKVE5kd095MTVtUVJRR2JPVERCa1E1MjhTYnJtcldGNFc3a0RNb1dzMHQwMlVJbFNmQldEakpyVmhhclJSOVF1RgpjR2pvUzU5VENBRmNISFVzUE8zbGNVVDFUQ3EvVzR4bmRzM3pCeEppR2VJZG1EcUU2RGJTNzhZZndQOXJoVHgwCm94Y1F3cEthT2o4dnhRTlF4TmJKUm1XZ2ZmeDBQZ1V6RlBuaS9ONUZnRlFRWERQRzRpMGdNY2lla0hXejhWUk0KcHAyejF1RDFsVmREYS84M3cvSVpDUU9xRFU3Y1JqRG9zZytnYUFlZkZHTk1IVmJQQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    cloud.sealos.io/app-deploy-manager: elasticsearch-master
    app: "elasticsearch-master"
type: Opaque
stringData:
  username: elastic
  password: ${{ defaults.elasticsearch_passwd }}
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    cloud.sealos.io/app-deploy-manager: elasticsearch-master
    app: "elasticsearch-master"
spec:
  type: ClusterIP
  selector:
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    app: "elasticsearch-master"
    cloud.sealos.io/app-deploy-manager: elasticsearch-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    app: "elasticsearch-master"
    cloud.sealos.io/app-deploy-manager: elasticsearch-master
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
        annotations:
          value: " ${{ inputs.elasticsearch_storage }} "
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${{ inputs.elasticsearch_storage }}Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        app: "elasticsearch-master"
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - "elasticsearch-master"
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: elasticsearch-master-certs
      enableServiceLinks: true
      containers:
        - name: "elasticsearch-master"
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e

                  # Exit if ELASTIC_PASSWORD in unset
                  if [ -z "${ELASTIC_PASSWORD}" ]; then
                    echo "ELASTIC_PASSWORD variable is missing, exiting"
                    exit 1
                  fi

                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s

                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi

                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                    curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                  }

                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi

                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: "elasticsearch-master-0,"
            - name: node.roles
              value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
            - name: discovery.seed_hosts
              value: "elasticsearch-master-headless"
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-master-credentials
                  key: password
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
          volumeMounts:
            - name: "elasticsearch-master"
              mountPath: /usr/share/elasticsearch/data
            - name: elasticsearch-certs
              mountPath: /usr/share/elasticsearch/config/certs
              readOnly: true
