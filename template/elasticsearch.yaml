apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: Elasticsearch
spec:
  title: "Elasticsearch"
  url: "https://www.elastic.co"
  gitRepo: "https://github.com/elastic/elasticsearch"
  author: "Elasticsearch"
  description: "Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fineâ€‘tuned relevancy, and powerful analytics that scale with ease."
  readme: "https://raw.githubusercontent.com/elastic/elasticsearch/main/README.asciidoc"
  icon: "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt549f7d977c2a88f4/5d082d34616162aa5a85707d/logo-enterprise-search-32-color.svg"
  templateType: inline
  defaults:
    app_name:
      type: string
      value: es-${{ random(4) }}
    elasticsearch_passwd:
      type: string
      value: ${{ random(24) }}
  inputs:
    elasticsearch_storage:
      description: "Storage size for elasticsearch in Gi"
      type: number
      default: "5"
      required: true
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: ${{ defaults.app_name }}-es-certs
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-es-master
    app: ${{ defaults.app_name }}-es-master
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpakNDQW5LZ0F3SUJBZ0lSQUttdUZqNTFzYnRORUZmb3psM3U1UzB3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlNekV4TWpBd01USXhORGhhRncweQpOREV4TVRrd01USXhORGhhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0SHMwSHBpSHVwS1AwTWtlcU1IYUxGOU4KTFpLLzYrQlE3ZzZQektOdXZ0ZFVEdUhlQXRzY0ZsQlNpd1p6RXVYWE9LNWRWUjdqaUE2b3k1eXhHVlY3NzZNLwpaVnd6cXZTU25TekdnOWhySC9oNmxoL0ZFOG5pdkRYaDM0NTBtbnJXOVprSWUvNmxtZHZGK0F4VUlqSGQ5RWUrCkZNSzR2UnF5QW5Td2FjNXpteE01R0hjU1Uwb241ek5LMkNUK1lqOS9sc1ZGcld6Wjd3aUt0L1R4YTVYTXdPM0UKS0hXRTlWWitmd2Y5TVdmK1JlSy9JWkRlbytzVDdRbTZkYTVOSmRnSmdndTFCSjIybCs5dFY0ejRWVTJKeCtVQQo2QzFqbEhSb3NiOVV5aktrNElRNmhIbndTVkhDcHVIY3M5RmFyQVJSS3NveThRakJBd1cyMVAyNGlEd3ZDd0lECkFRQUJvNEhFTUlIQk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlQxMVlrWUx1cldJN1BNMUh6OAo1L1FYOU81elVUQmhCZ05WSFJFRVdqQllnaFJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY29JZFpXeGhjM1JwClkzTmxZWEpqYUMxdFlYTjBaWEl1Ym5NdFlXUnRhVzZDSVdWc1lYTjBhV056WldGeVkyZ3RiV0Z6ZEdWeUxtNXoKTFdGa2JXbHVMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUVMQ0cyclpMcmMxYVpsalJJb3ZjT3dTRApSaWwxTXhCNlExSnJmRVRVY1VTOGpUQi9WNGtmZ1FULzBCT3hXZWxQcktSbUVGcEMzTEUxNXRDV1JjM2J0dU00CkpDMGJLMW91T1FQR01rOUVOTTUyVjNaQjBWLzZPZFJ5SFB6YWNjYXVoUG1YSnpSMnpNUW5mTlBuZWNiN3RSMFEKVHZyOW95dUpKWXZQQ0J1N0RqTUx6TDRmWTdMVlo1UGh1czdEbTErcGtLRllwVGx0RFpaenk4b1k4dmZ1L093LwpBMTNIdyt1ekFpSUlrcURYQUo5OVhmUlo1Um5yYmhTbS9uckt6R2R4RUdSOTFISUlpUTZ0QUk5NWxMWHNDK2FZCmpXQ0pWSTJCekVPM0NLdDJRblZJY2o3cWw4M2JsK0FJWUNjTkpZc2lyT0lKWDRWZG8yN0U2S1h2MFRYUk13PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdEhzMEhwaUh1cEtQME1rZXFNSGFMRjlOTFpLLzYrQlE3ZzZQektOdXZ0ZFVEdUhlCkF0c2NGbEJTaXdaekV1WFhPSzVkVlI3amlBNm95NXl4R1ZWNzc2TS9aVnd6cXZTU25TekdnOWhySC9oNmxoL0YKRThuaXZEWGgzNDUwbW5yVzlaa0llLzZsbWR2RitBeFVJakhkOUVlK0ZNSzR2UnF5QW5Td2FjNXpteE01R0hjUwpVMG9uNXpOSzJDVCtZajkvbHNWRnJXelo3d2lLdC9UeGE1WE13TzNFS0hXRTlWWitmd2Y5TVdmK1JlSy9JWkRlCm8rc1Q3UW02ZGE1TkpkZ0pnZ3UxQkoyMmwrOXRWNHo0VlUySngrVUE2QzFqbEhSb3NiOVV5aktrNElRNmhIbncKU1ZIQ3B1SGNzOUZhckFSUktzb3k4UWpCQXdXMjFQMjRpRHd2Q3dJREFRQUJBb0lCQUNnYTFJc1Q4OTAyb2pTUAo3SHN0a0hDWndNbW11WFVOeEk0UnVFeU42SmNKdkVrT1Vjb3FyRVFkRnlxRGhXQ21xRHVWSzNJMXlmTzY1akZRCm9WM3l5L2FGUFJvbDhlbEVMYXcxZmV0Z1ZQV212bjdMa255Q09Sci9rakNlTkRUN3BQYXdTZDFieWFxMTFuajMKTEY3bzI5eGpjTTZtTW16N0dLRkpFc2FBTk5vNWZGcy9pVGZyRDJKOTg5S2JoV2ZiVG1hRmxCTVQ1dFFSZHpaegp1NTl3Z0xhY0ozV0piMzRlZFZVL3pUdFdueUxKTGJHdFBOQWp6cjVpclU5ellHaUhXQ0RRRW5xeWN1czNpQks2CjRNRmcwTGFzak1nbUZsNFVhbGU3TGp6UXJNL1dsRlRqUTVBaTUwbzFPKzZ4NlN3a2Y5TzZCc0h4WHVvei81L3gKVExuQTgya0NnWUVBdzUwY255VDNqRSs0S2duK3pzcEFmSmNuTHVBSE9KZ0xFZU5FYndmUFluUnB5dmpZdDdTYQoyaU03aUgrbStsY0QxMStIcWsyQ3c1bXZFcGduTktrYU9hWktQOUF4ZEozMy9LYThnWWsvNnBEUWJwZTJ4dzFDClBURFRhb0M1NE9keHlXZmFZUW5wUHBZMzR1T3RuVGpSLzBINHUxa255Uy95UGxPM2RyenNWQ1VDZ1lFQTdESTEKdURqejlVM2ZaRjVLQytKeWlQZ3pISk1BS3NWM3VrS3kxQk5NRUdxaFhTbDZ0MG1GOHN6aGREd2VoclpRY0RVRgpJcGdKS1d1YS85elAvMVZzQ3BxZmE0N2Q5dEM4Z3M5UWUxengrQWcrN2EwMkd4TXVBNC9mTk0yMzgwUzVhM3AzClM5TnkzTCtIVTFmVlJVZklYNEx2SWJRdHFyYTlsWERTYjZnRTkyOENnWUVBa0RqREJIYmQ2TjVSMnZUWm9COHcKSW12VElOVmRuWlZEL0NGQ3NGWGl5aVVvWnRUSCs5RzFwZ1Q1L0s2Wkx0Tis2b2p0WGx1ZGdKZExvL3I0VlBRawplTUtvMVptckRONzNHcGpZUE8wemFiN3hYY2lQb3Z5Y2pMNzE4UDBOanNzMWNwZ1dReHRxazVGdmpPSHVmQStMCmpKWllTOUQwNjNsbE1oekpGRXRBTnQwQ2dZRUF2dHg3NkZldFcwWUlCSFRrNU9HaHArallkSGlkSS9MWm90dU8KNGl5TnhKNUZzcUI0RjNBRUc0VlBrYnVhOTBTUGozeG9uK0czVlk4c2V5RVZ1c0J1UTh0YWszR3BEMjd4UmNyOAp3Qk1GUEdaOVkxWWFhSnFCRGtQT0hEODRMQTRXdnpFQkFYYm1WRmM0cFRKT2xtTkJHVjBXbTJlYmwxMS9xU2k0CkE1NEVGV1VDZ1lFQWswRHU2SVBpYnlOSFVuTGJUYmhQdnlLNm1nTjFyb3FJVmlsZ2t2Yk0vOUM5QSs2NXNmSjUKSVA2RGxqRDFJUmIvR0V1WGl6UHJweHJlbklsa3VibkRwYXhpdTBCZXhHWHg0aEdZcUhURzBxcU5USHAvNDV5bQpiSExDRFB2eERQdEhlMWpmOXBwYzgxcXk0eHhYYVFweUZ0UHUwdFlxUlIxNUNBaWNGdzZ5RitzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUlrN1BLQ21nT0ZhSWpTa09SOW5YV293RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlNekV4TWpBd01USXhORGRhRncweQpOREV4TVRrd01USXhORGRhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVjRrMnM5K1VlbUxkUDh2Nk1aRW9PVG05Qm9oVUoKWEpTNVZrZ3dOMUkxNzJmUHZLclRXbTBEQ1VNSER6TE1ITnc0cmd4Z2RmalhqdjhZZ2o4SnQvWTU1NjluNnpXZwprdzg5WG5DWnpwc2F3Wkg3YVJzM25iN29qejBuNG5BTVlubjR6VEY1TTdUTUJTd2krQy9iRlNEV1VuTTN2eStlCmVLeGExT3NOTTE2YUkyVnlQSU9MQkJYdWRjRXgxMjJDT1l5NFJMY2ZJS3M0dFc0Z3Q2SDFuUUJNTzZxRVlrbTgKSy9sVk9hRlRRODFGWFVkYzZvUzlSTkdVZHh5U21Idzc5ZnJkdCtOdzIySlNMbjdBdnR0TFNPc1pwNHdjTUp4TAo3N2IyNHhQVWFXZjBTdy9rc3RGSjE0SjA2ZEl3MGRieGpsUFhiL0EwbllPT3BDbk45bTRrYTczNUFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVTlkV0pHQzdxMWlPenpOUjgvT2YwRi9UdQpjMUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUhEZEpPTlVRbXljM1lBR0ZtRVhHb0J4Mk1hVWZyNktUVnN1Cm01Sy9seUlMT1crVndxYURVYm9QR2RBdHF4VTdCMkdaQlNFUWoyWkZ1eEE4RE5oMnJ5aGNEbnEzYkRNOVQ0Q0oKUUUxZkh3SmVVaW9RaUxqSk1DU3AxbUhqZnJxUFI0RVpCZHAvWExYdXMzS1V5R2NadWM3RU55elNqQ0htS2xPbwpDeFF3YjlQMmJGVUN3NDIvdUk0UHF1R1Qzc3R1SlhjeHRBam1FaUhmN3RHcHg5blFWZEZxbXo1K0lIMFhuS1p1Ck1UdDlnYzluUzlQaWhCbVV0NldPbldEN1FMS2QyT3o0ZTE4S0dlbGN5SGlvSFV0SFlWcU93MFVXSUlTRG5YTWMKTWVaMDBPY1Q5ckVHWFd3dHNScUNJOUluSk5teTF5VXdmNEc4eHV1cUlXUlE2emJkQ3lvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ${{ defaults.app_name }}-es-credentials
  labels:
    app: ${{ defaults.app_name }}-es-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-es-master
type: Opaque
stringData:
  username: elastic
  password: ${{ defaults.elasticsearch_passwd }}
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: ${{ defaults.app_name }}-es-master
  labels:
    app: ${{ defaults.app_name }}-es-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-es-master
spec:
  type: ClusterIP
  selector:
    app: ${{ defaults.app_name }}-es-master
  publishNotReadyAddresses: false
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: ${{ defaults.app_name }}-es-master-headless
  labels:
    app: ${{ defaults.app_name }}-es-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-es-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: ${{ defaults.app_name }}-es-master
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}-es-master
  labels:
    app: ${{ defaults.app_name }}-es-master
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}-es-master
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: ${{ defaults.app_name }}-es-master-headless
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}-es-master
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
        annotations:
          value: " ${{ inputs.elasticsearch_storage }} "
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${{ inputs.elasticsearch_storage }}Gi
  template:
    metadata:
      name: ${{ defaults.app_name }}-es-master
      labels:
        app: ${{ defaults.app_name }}-es-master
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - ${{ defaults.app_name }}-es-master
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: ${{ defaults.app_name }}-es-certs
      enableServiceLinks: true
      containers:
        - name: "elasticsearch"
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e

                  # Exit if ELASTIC_PASSWORD in unset
                  if [ -z "${ELASTIC_PASSWORD}" ]; then
                    echo "ELASTIC_PASSWORD variable is missing, exiting"
                    exit 1
                  fi

                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s

                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi

                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                    curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                  }

                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi

                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: "elasticsearch-master-0,"
            - name: node.roles
              value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
            - name: discovery.seed_hosts
              value: "elasticsearch-master-headless"
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-es-credentials
                  key: password
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.transport.ssl.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "true"
            - name: xpack.security.transport.ssl.verification_mode
              value: "certificate"
            - name: xpack.security.transport.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.transport.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.transport.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
            - name: xpack.security.http.ssl.key
              value: "/usr/share/elasticsearch/config/certs/tls.key"
            - name: xpack.security.http.ssl.certificate
              value: "/usr/share/elasticsearch/config/certs/tls.crt"
            - name: xpack.security.http.ssl.certificate_authorities
              value: "/usr/share/elasticsearch/config/certs/ca.crt"
          volumeMounts:
            - name: "elasticsearch-master"
              mountPath: /usr/share/elasticsearch/data
            - name: elasticsearch-certs
              mountPath: /usr/share/elasticsearch/config/certs
              readOnly: true
