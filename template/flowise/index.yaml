apiVersion: app.sealos.io/v1
kind: Template
metadata:
  name: flowise
spec:
  title: 'Flowise'
  url: 'https://flowiseai.com/'
  gitRepo: 'https://github.com/FlowiseAI/Flowise'
  author: 'Sealos'
  description: 'Drag & drop UI to build your customized LLM flow.'
  readme: 'https://raw.githubusercontent.com/FlowiseAI/Flowise/refs/heads/main/README.md'
  icon: 'https://avatars.githubusercontent.com/u/128289781?s=48&v=4'
  templateType: inline
  locale: en
  categories:
    - ai
  i18n:
    zh:
      title: 'Flowise'
      description: '拖放式 UI 构建您的自定义 LLM 流程'
      readme: 'https://raw.githubusercontent.com/FlowiseAI/Flowise/refs/heads/main/i18n/README-ZH.md'
  defaults:
    app_name:
      type: string
      value: flowise-${{ random(8) }}
    app_host:
      type: string
      value: ${{ random(8) }}
  inputs:
    USE_POSTGRESQL:
      description: 'Use PostgreSQL database instead of local SQLite'
      type: boolean
      default: 'false'
      required: false
    USE_S3_STORAGE:
      description: 'Use S3 object storage for file uploads'
      type: boolean
      default: 'false'
      required: false
---
${{ if(inputs.USE_S3_STORAGE === 'true') }}
apiVersion: objectstorage.sealos.io/v1
kind: ObjectStorageBucket
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  policy: private
---
${{ endif() }}

${{ if(inputs.USE_POSTGRESQL === 'true') }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
    app.kubernetes.io/instance: ${{ defaults.app_name }}-pg
    app.kubernetes.io/managed-by: kbcli
  name: ${{ defaults.app_name }}-pg
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${{ defaults.app_name }}-pg
subjects:
  - kind: ServiceAccount
    name: ${{ defaults.app_name }}-pg

---
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  finalizers:
    - cluster.kubeblocks.io/finalizer
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    clusterversion.kubeblocks.io/name: postgresql-14.8.0
    sealos-db-provider-cr: ${{ defaults.app_name }}-pg
  name: ${{ defaults.app_name }}-pg
spec:
  affinity:
    nodeLabels: {}
    podAntiAffinity: Preferred
    tenancy: SharedNode
    topologyKeys: []
  clusterDefinitionRef: postgresql
  clusterVersionRef: postgresql-14.8.0
  componentSpecs:
    - componentDefRef: postgresql
      monitor: true
      name: postgresql
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 500Mi
        requests:
          cpu: 50m
          memory: 50Mi
      serviceAccountName: ${{ defaults.app_name }}-pg
      switchPolicy:
        type: Noop
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 3Gi
            storageClassName: openebs-backup
  terminationPolicy: Delete
  tolerations: []

---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${{ defaults.app_name }}-pg-init
spec:
  completions: 1
  template:
    spec:
      containers:
        - name: pgsql-init
          image: postgres:14-alpine
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: host
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
          command:
            - /bin/sh
            - -c
            - |
              until psql -c 'CREATE DATABASE flowise;' &>/dev/null; do sleep 1; done
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 300
---
${{ endif() }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${{ defaults.app_name }}
  annotations:
    originImageName: flowiseai/flowise:3.0.5
    deploy.cloud.sealos.io/minReplicas: '1'
    deploy.cloud.sealos.io/maxReplicas: '1'
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    app: ${{ defaults.app_name }}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  serviceName: ${{ defaults.app_name }}
  selector:
    matchLabels:
      app: ${{ defaults.app_name }}
  template:
    metadata:
      labels:
        app: ${{ defaults.app_name }}
    spec:
      automountServiceAccountToken: false
      ${{ if(inputs.USE_POSTGRESQL === 'true') }}
      initContainers:
        - name: wait-for-db
          image: postgres:14-alpine
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: host
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h ${PGHOST} -p ${PGPORT}; do
                echo "PostgreSQL is not ready yet. Waiting..."
                sleep 2
              done
              echo "PostgreSQL is ready. Checking if database 'flowise' exists..."
              until psql -tc "SELECT 1 FROM pg_database WHERE datname = 'flowise'" | grep -q 1; do
                echo "Database 'flowise' does not exist yet. Waiting..."
                sleep 2
              done
              echo "Database 'flowise' exists. Proceeding with application startup."
      ${{ endif() }}
      containers:
        - name: ${{ defaults.app_name }}
          image: flowiseai/flowise:3.0.5
          env:
            - name: PORT
              value: '3000'
            - name: APIKEY_PATH
              value: '/root/.flowise'
            - name: SECRETKEY_PATH
              value: '/root/.flowise'
            - name: LOG_PATH
              value: '/root/.flowise/logs'
            - name: JWT_AUTH_TOKEN_SECRET
              value: '${{ random(40) }}'
            - name: JWT_REFRESH_TOKEN_SECRET
              value: '${{ random(40) }}'
            - name: JWT_ISSUER
              value: 'Flowise'
            - name: JWT_AUDIENCE
              value: 'Flowise'
            - name: JWT_TOKEN_EXPIRY_IN_MINUTES
              value: '360'
            - name: JWT_REFRESH_TOKEN_EXPIRY_IN_MINUTES
              value: '43200'
            ${{ if(inputs.USE_POSTGRESQL === 'true') }}
            - name: DATABASE_TYPE
              value: 'postgres'
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: host
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: port
            - name: DATABASE_NAME
              value: 'flowise'
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${{ defaults.app_name }}-pg-conn-credential
                  key: password
            ${{ else() }}
            - name: DATABASE_PATH
              value: '/root/.flowise'
            ${{ endif() }}
            ${{ if(inputs.USE_S3_STORAGE === 'true') }}
            - name: STORAGE_TYPE
              value: 's3'
            - name: S3_STORAGE_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: accessKey
            - name: S3_STORAGE_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: secretKey
            - name: S3_STORAGE_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: object-storage-key-${{ SEALOS_SERVICE_ACCOUNT }}-${{ defaults.app_name }}
                  key: bucket
            - name: BACKEND_STORAGE_MINIO_EXTERNAL_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: object-storage-key
                  key: external
            - name: S3_ENDPOINT_URL
              value: 'https://$(BACKEND_STORAGE_MINIO_EXTERNAL_ENDPOINT)'
            - name: S3_FORCE_PATH_STYLE
              value: 'true' 
            - name: S3_STORAGE_REGION
              value: 'us-west-2'
            ${{ else() }}
            - name: BLOB_STORAGE_PATH
              value: '/root/.flowise/storage'
            ${{ endif() }}
          resources:
            requests:
              cpu: 20m
              memory: 102Mi
            limits:
              cpu: 200m
              memory: 1024Mi
          command:
            - /bin/sh
            - '-c'
          args:
            - flowise start
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: vn-rootvn-flowise
              mountPath: /root/.flowise
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - curl -f http://localhost:3000/api/v1/ping | grep -q 'pong'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - curl -f http://localhost:3000/api/v1/ping | grep -q 'pong'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
  volumeClaimTemplates:
    - metadata:
        annotations:
          path: /root/.flowise
          value: '1'
        name: vn-rootvn-flowise
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi


---
apiVersion: v1
kind: Service
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  ports:
    - port: 3000
  selector:
    app: ${{ defaults.app_name }}


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
    cloud.sealos.io/app-deploy-manager-domain: ${{ defaults.app_host }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 32m
    nginx.ingress.kubernetes.io/server-snippet: |
      client_header_buffer_size 64k;
      large_client_header_buffers 4 128k;
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_uri ~* \.(js|css|gif|jpe?g|png)) {
        expires 30d;
        add_header Cache-Control "public";
      }
spec:
  rules:
    - host: ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: ${{ defaults.app_name }}
                port:
                  number: 3000
  tls:
    - hosts:
        - ${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
      secretName: ${{ SEALOS_CERT_SECRET_NAME }}

---
apiVersion: app.sealos.io/v1
kind: App
metadata:
  name: ${{ defaults.app_name }}
  labels:
    cloud.sealos.io/app-deploy-manager: ${{ defaults.app_name }}
spec:
  name: ${{ defaults.app_name }}
  displayType: normal
  type: link
  icon: https://avatars.githubusercontent.com/u/128289781?s=48&v=4
  url: https://${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}
  data:
    url: https://${{ defaults.app_host }}.${{ SEALOS_CLOUD_DOMAIN }}